
{
  "trees": {
    "IT_Password": {
      "origin": "eaf5698c2d7bb43ec2c28595ea131127",
      "innernodes": {},
      "nodes": {
        "65FF19D5-D7A9-4367-9E6C-6F0A3F0B4686": {
          "_id": "65FF19D5-D7A9-4367-9E6C-6F0A3F0B4686",
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          }
        },
        "771329B2-1408-46BF-A184-DF35A6CA02DD": {
          "_id": "771329B2-1408-46BF-A184-DF35A6CA02DD",
          "_type": {
            "_id": "PasswordCollectorNode",
            "name": "Password Collector",
            "collection": true
          }
        },
        "DF7CB572-E45F-454B-B7AE-777DECE026CE": {
          "_id": "DF7CB572-E45F-454B-B7AE-777DECE026CE",
          "_type": {
            "_id": "DataStoreDecisionNode",
            "name": "Data Store Decision",
            "collection": true
          }
        }
      },
      "scripts": {},
      "tree": {
        "_id": "IT_Password",
        "nodes": {
          "771329B2-1408-46BF-A184-DF35A6CA02DD": {
            "displayName": "2. Password Collector",
            "nodeType": "PasswordCollectorNode",
            "connections": {
              "outcome": "DF7CB572-E45F-454B-B7AE-777DECE026CE"
            }
          },
          "DF7CB572-E45F-454B-B7AE-777DECE026CE": {
            "displayName": "3. Data Store Decision",
            "nodeType": "DataStoreDecisionNode",
            "connections": {
              "false": "65FF19D5-D7A9-4367-9E6C-6F0A3F0B4686",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            }
          },
          "65FF19D5-D7A9-4367-9E6C-6F0A3F0B4686": {
            "displayName": "4. Retry Limit Decision",
            "nodeType": "RetryLimitDecisionNode",
            "connections": {
              "Retry": "771329B2-1408-46BF-A184-DF35A6CA02DD",
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a"
            }
          }
        },
        "entryNodeId": "771329B2-1408-46BF-A184-DF35A6CA02DD"
      }
    },
    "DeviceFingerprint": {
      "origin": "eaf5698c2d7bb43ec2c28595ea131127",
      "innernodes": {},
      "nodes": {
        "0658C073-9D56-4167-98D2-D25ADB88E6D1": {
          "_id": "0658C073-9D56-4167-98D2-D25ADB88E6D1",
          "outcomes": [
            "true"
          ],
          "script": "d4096014-6fa8-4187-acda-0a535bede884",
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          }
        },
        "3E9ACB9D-CA63-44D7-B57B-3B4ED08C2C36": {
          "_id": "3E9ACB9D-CA63-44D7-B57B-3B4ED08C2C36",
          "transientProperties": {},
          "properties": {
            "devicePrintProfiles": "devicePrintProfile"
          },
          "addAttributes": true,
          "_type": {
            "_id": "SetProfilePropertyNode",
            "name": "Set Profile Property",
            "collection": true
          }
        },
        "522007B4-C80C-47EF-AFB9-99C18B5FC4B8": {
          "_id": "522007B4-C80C-47EF-AFB9-99C18B5FC4B8",
          "outcomes": [
            "matched",
            "not matched"
          ],
          "script": "54069406-cf9d-4f1c-b62c-1512ded3fbe3",
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          }
        },
        "838EC956-B7E4-4D73-A4FD-E7C1F1BF6413": {
          "_id": "838EC956-B7E4-4D73-A4FD-E7C1F1BF6413",
          "tree": "IT_Password",
          "_type": {
            "_id": "InnerTreeEvaluatorNode",
            "name": "Inner Tree Evaluator",
            "collection": true
          }
        },
        "A0CD88C3-CD13-48C7-B20D-C19DF4F60CC2": {
          "_id": "A0CD88C3-CD13-48C7-B20D-C19DF4F60CC2",
          "_type": {
            "_id": "UsernameCollectorNode",
            "name": "Username Collector",
            "collection": true
          }
        },
        "C72F9322-87DD-4FB3-B009-1873FC12DD19": {
          "_id": "C72F9322-87DD-4FB3-B009-1873FC12DD19",
          "transientProperties": {},
          "properties": {
            "devicePrintProfiles": "devicePrintProfiles"
          },
          "addAttributes": false,
          "_type": {
            "_id": "SetProfilePropertyNode",
            "name": "Set Profile Property",
            "collection": true
          }
        },
        "C9B75C60-ACF6-4E70-84BC-77F5D9BD4498": {
          "_id": "C9B75C60-ACF6-4E70-84BC-77F5D9BD4498",
          "scriptResult": "devicePrint",
          "script": "e8ffed9c-fa1a-4fc3-8f59-49990ded1210",
          "_type": {
            "_id": "ClientScriptNode",
            "name": "Client Script",
            "collection": true
          }
        },
        "CB828D08-C341-48B9-BBC9-7819F747F5E1": {
          "_id": "CB828D08-C341-48B9-BBC9-7819F747F5E1",
          "variable": "deviceName",
          "useTransient": false,
          "isPassword": false,
          "prompt": "Enter name for device",
          "_type": {
            "_id": "InputCollectorNode",
            "name": "Input Collector Node",
            "collection": true
          }
        },
        "D8D71123-BF12-44A9-A9A9-FB03535CE9FC": {
          "_id": "D8D71123-BF12-44A9-A9A9-FB03535CE9FC",
          "defaultChoice": "skip",
          "choices": [
            "save",
            "skip"
          ],
          "prompt": "Save device as trusted?",
          "_type": {
            "_id": "ChoiceCollectorNode",
            "name": "Choice Collector",
            "collection": true
          }
        },
        "ED1FC9C1-3F79-4835-AAED-A9A376533012": {
          "_id": "ED1FC9C1-3F79-4835-AAED-A9A376533012",
          "keys": {
            "devicePrintProfiles": "devicePrintProfiles"
          },
          "selectType": "SelectExact",
          "_type": {
            "_id": "ProfileAttributeToStateNode",
            "name": "Profile Attribute To State",
            "collection": true
          }
        }
      },
      "scripts": {
        "d4096014-6fa8-4187-acda-0a535bede884": {
          "_id": "d4096014-6fa8-4187-acda-0a535bede884",
          "name": "AT_DeviceSave",
          "description": "This decision node script for authentication trees script creates a shared state deviceprintProfile variable that contains the new device fingerprint (which must be added to the user profile with a SetProfileProperty Node in the Authentication Tree)",
          "script": "ZnVuY3Rpb24gdXVpZHY0KCkgewogIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHsKICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMCwgdiA9IGMgPT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTsKICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTsKICB9KTsKfQoKCnZhciBkZXZpY2UgPSB7CgkibGFzdFNlbGVjdGVkRGF0ZSI6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLAoJImRldmljZVByaW50IjogSlNPTi5wYXJzZShTdHJpbmcoc2hhcmVkU3RhdGUuZ2V0KCJkZXZpY2VQcmludCIpKSksCgkibmFtZSI6IFN0cmluZyhzaGFyZWRTdGF0ZS5nZXQoImRldmljZU5hbWUiKSksCgkic2VsZWN0aW9uQ291bnRlciI6IDEsCgkidXVpZCI6IHV1aWR2NCgpCn0KCmxvZ2dlci5tZXNzYWdlKCJOZXcgZGV2aWNlOiAiICsgSlNPTi5zdHJpbmdpZnkoZGV2aWNlKSk7CgpzaGFyZWRTdGF0ZS5wdXQoImRldmljZVByaW50UHJvZmlsZSIsIEpTT04uc3RyaW5naWZ5KGRldmljZSkpOwoKb3V0Y29tZSA9ICJ0cnVlIjs=",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0
        },
        "54069406-cf9d-4f1c-b62c-1512ded3fbe3": {
          "_id": "54069406-cf9d-4f1c-b62c-1512ded3fbe3",
          "name": "AT_DeviceMatch",
          "description": "This decision node script for authentication trees script evaluates the device fingerprint. Does it already exist in the devicePrintProfiles? If so, update the lastUpdated date and userCount (number of times utilized). It also removes any expired profiles (based on configurable expiration time).",
          "script": "LyoKICogRE8gTk9UIEFMVEVSIE9SIFJFTU9WRSBDT1BZUklHSFQgTk9USUNFUyBPUiBUSElTIEhFQURFUi4KICoKICogQ29weXJpZ2h0IChjKSAyMDA5IFN1biBNaWNyb3N5c3RlbXMgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIHRlcm1zCiAqIG9mIHRoZSBDb21tb24gRGV2ZWxvcG1lbnQgYW5kIERpc3RyaWJ1dGlvbiBMaWNlbnNlCiAqICh0aGUgTGljZW5zZSkuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluCiAqIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICoKICogWW91IGNhbiBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqIGh0dHBzOi8vb3BlbnNzby5kZXYuamF2YS5uZXQvcHVibGljL0NEREx2MS4wLmh0bWwgb3IKICogb3BlbnNzby9sZWdhbC9DRERMdjEuMC50eHQKICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nCiAqIHBlcm1pc3Npb24gYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKiBXaGVuIGRpc3RyaWJ1dGluZyBDb3ZlcmVkIENvZGUsIGluY2x1ZGUgdGhpcyBDRERMCiAqIEhlYWRlciBOb3RpY2UgaW4gZWFjaCBmaWxlIGFuZCBpbmNsdWRlIHRoZSBMaWNlbnNlIGZpbGUKICogYXQgb3BlbnNzby9sZWdhbC9DRERMdjEuMC50eHQuCiAqIElmIGFwcGxpY2FibGUsIGFkZCB0aGUgZm9sbG93aW5nIGJlbG93IHRoZSBDRERMIEhlYWRlciwKICogd2l0aCB0aGUgZmllbGRzIGVuY2xvc2VkIGJ5IGJyYWNrZXRzIFtdIHJlcGxhY2VkIGJ5CiAqIHlvdXIgb3duIGlkZW50aWZ5aW5nIGluZm9ybWF0aW9uOgogKiAiUG9ydGlvbnMgQ29weXJpZ2h0ZWQgW3llYXJdIFtuYW1lIG9mIGNvcHlyaWdodCBvd25lcl0iCiAqCiAqLwovKgogKiBQb3J0aW9ucyBDb3B5cmlnaHRlZCAyMDEzIFN5bnRlZ3JpdHkuCiAqIFBvcnRpb25zIENvcHlyaWdodGVkIDIwMTMtMjAxOCBGb3JnZVJvY2sgQVMuCiAqLwoKdmFyIFNjYWxhckNvbXBhcmF0b3IgPSB7fSwgU2NyZWVuQ29tcGFyYXRvciA9IHt9LCBNdWx0aVZhbHVlQ29tcGFyYXRvciA9IHt9LCBVc2VyQWdlbnRDb21wYXJhdG9yID0ge30sIEdlb2xvY2F0aW9uQ29tcGFyYXRvciA9IHt9OwoKdmFyIGNvbmZpZyA9IHsKICAgIHByb2ZpbGVFeHBpcmF0aW9uOiAzMCwgICAgICAgICAgICAgIC8vaW4gZGF5cwogICAgbWF4UHJvZmlsZXNBbGxvd2VkOiA1LAogICAgbWF4UGVuYWx0eVBvaW50czogMCwKICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICBzY3JlZW46IHsKICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICAgIGNvbXBhcmF0b3I6IFNjcmVlbkNvbXBhcmF0b3IsCiAgICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgICAgIHBlbmFsdHlQb2ludHM6IDUwCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHBsdWdpbnM6IHsKICAgICAgICAgICAgaW5zdGFsbGVkUGx1Z2luczogewogICAgICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgY29tcGFyYXRvcjogTXVsdGlWYWx1ZUNvbXBhcmF0b3IsCiAgICAgICAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgICAgICAgICAgbWF4UGVyY2VudGFnZURpZmZlcmVuY2U6IDEwLAogICAgICAgICAgICAgICAgICAgIG1heERpZmZlcmVuY2VzOiA1LAogICAgICAgICAgICAgICAgICAgIHBlbmFsdHlQb2ludHM6IDEwMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBmb250czogewogICAgICAgICAgICBpbnN0YWxsZWRGb250czogewogICAgICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgY29tcGFyYXRvcjogTXVsdGlWYWx1ZUNvbXBhcmF0b3IsCiAgICAgICAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgICAgICAgICAgbWF4UGVyY2VudGFnZURpZmZlcmVuY2U6IDEwLAogICAgICAgICAgICAgICAgICAgIG1heERpZmZlcmVuY2VzOiA1LAogICAgICAgICAgICAgICAgICAgIHBlbmFsdHlQb2ludHM6IDEwMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB0aW1lem9uZTogewogICAgICAgICAgICB0aW1lem9uZTogewogICAgICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgY29tcGFyYXRvcjogU2NhbGFyQ29tcGFyYXRvciwKICAgICAgICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgICAgICAgICBwZW5hbHR5UG9pbnRzOiAxMDAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgdXNlckFnZW50OiB7CiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgICBjb21wYXJhdG9yOiBVc2VyQWdlbnRDb21wYXJhdG9yLAogICAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgICAgICBpZ25vcmVWZXJzaW9uOiB0cnVlLAogICAgICAgICAgICAgICAgcGVuYWx0eVBvaW50czogMTAwCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGdlb2xvY2F0aW9uOiB7CiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICAgICAgY29tcGFyYXRvcjogR2VvbG9jYXRpb25Db21wYXJhdG9yLAogICAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgICAgICBhbGxvd2VkUmFuZ2U6IDEwMCwgICAgICAvL2luIG1pbGVzCiAgICAgICAgICAgICAgICBwZW5hbHR5UG9pbnRzOiAxMDAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBDb21wYXJhdG9yIGZ1bmN0aW9ucyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLwovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCgp2YXIgYWxsLCBhbnksIGNhbGN1bGF0ZURpc3RhbmNlLCBjYWxjdWxhdGVJbnRlcnNlY3Rpb24sIGNhbGN1bGF0ZVBlcmNlbnRhZ2UsIG51bGxPclVuZGVmaW5lZCwgc3BsaXRBbmRUcmltLAogICAgdW5kZWZpbmVkTG9jYXRpb247CgovLyBDb21wYXJpc29uUmVzdWx0CgovKioKICogQ29uc3RydWN0cyBhbiBpbnN0YW5jZSBvZiBhIENvbXBhcmlzb25SZXN1bHQgd2l0aCB0aGUgZ2l2ZW4gcGVuYWx0eSBwb2ludHMuCiAqCiAqIEBwYXJhbSBwZW5hbHR5UG9pbnRzIChOdW1iZXIpIFRoZSBwZW5hbHR5IHBvaW50cyBmb3IgdGhlIGNvbXBhcmlzb24gKGRlZmF1bHRzIHRvIDApLgogKiBAcGFyYW0gYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZSAoYm9vbGVhbikgV2hldGhlciB0aGUgY3VycmVudCB2YWx1ZSBjb250YWlucyBtb3JlIGluZm9ybWF0aW9uCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGFuIHRoZSBzdG9yZWQgdmFsdWUgKGRlZmF1bHRzIHRvIGZhbHNlKS4KICovCmZ1bmN0aW9uIENvbXBhcmlzb25SZXN1bHQoKSB7CgogICAgdmFyIHBlbmFsdHlQb2ludHMgPSAwLAogICAgICAgIGFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUgPSBmYWxzZTsKCiAgICBpZiAoYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBwZW5hbHR5UG9pbnRzID0gYXJndW1lbnRzWzBdOwogICAgICAgIGFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUgPSBhcmd1bWVudHNbMV07CiAgICB9CgogICAgaWYgKGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkICYmIGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKHR5cGVvZihhcmd1bWVudHNbMF0pID09PSAiYm9vbGVhbiIpIHsKICAgICAgICAgICAgYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZSA9IGFyZ3VtZW50c1swXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwZW5hbHR5UG9pbnRzID0gYXJndW1lbnRzWzBdOwogICAgICAgIH0KICAgIH0KCiAgICB0aGlzLnBlbmFsdHlQb2ludHMgPSBwZW5hbHR5UG9pbnRzOwogICAgdGhpcy5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlID0gYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZTsKCn0KCkNvbXBhcmlzb25SZXN1bHQuWkVST19QRU5BTFRZX1BPSU5UUyA9IG5ldyBDb21wYXJpc29uUmVzdWx0KDApOwoKLyoqCiAqIFN0YXRpYyBtZXRob2QgZm9yIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcuCiAqCiAqIEByZXR1cm4gYm9vbGVhbiB0cnVlIGlmIGNvbXBhcmlzb25SZXN1bHQuaXNTdWNjZXNzZnVsKCkuCiAqLwpDb21wYXJpc29uUmVzdWx0LmlzU3VjY2Vzc2Z1bCA9ICBmdW5jdGlvbihjb21wYXJpc29uUmVzdWx0KSB7CiAgICByZXR1cm4gY29tcGFyaXNvblJlc3VsdC5pc1N1Y2Nlc3NmdWwoKTsKfTsKCgovKioKICogU3RhdGljIG1ldGhvZCBmb3IgZnVuY3Rpb25hbCBwcm9ncmFtbWluZy4KICoKICogQHJldHVybiBib29sZWFuIHRydWUgaWYgY29tcGFyaXNvblJlc3VsdC5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlLgogKi8KQ29tcGFyaXNvblJlc3VsdC5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlID0gIGZ1bmN0aW9uKGNvbXBhcmlzb25SZXN1bHQpIHsKICAgIHJldHVybiBjb21wYXJpc29uUmVzdWx0LmFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWU7Cn07CgovKioKICogQ29tcGFyaXNvbiBmdW5jdGlvbiB0aGF0IGNhbiBiZSBwcm92aWRlZCBhcyBhbiBhcmd1bWVudCB0byBhcnJheS5zb3J0CiAqLwpDb21wYXJpc29uUmVzdWx0LmNvbXBhcmUgPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kKSB7CiAgICBpZiAobnVsbE9yVW5kZWZpbmVkKGZpcnN0KSAmJiBudWxsT3JVbmRlZmluZWQoc2Vjb25kKSkgewogICAgICAgIHJldHVybiAwOwogICAgfSBlbHNlIGlmIChudWxsT3JVbmRlZmluZWQoZmlyc3QpKSB7CiAgICAgICAgcmV0dXJuIC0xOwogICAgfSBlbHNlIGlmIChudWxsT3JVbmRlZmluZWQoc2Vjb25kKSkgewogICAgICAgIHJldHVybiAxOwogICAgfSBlbHNlIHsKICAgICAgICBpZiAoZmlyc3QucGVuYWx0eVBvaW50cyAhPT0gc2Vjb25kLnBlbmFsdHlQb2ludHMpIHsKICAgICAgICAgICAgcmV0dXJuIGZpcnN0LnBlbmFsdHlQb2ludHMgLSBzZWNvbmQucGVuYWx0eVBvaW50czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gKGZpcnN0LmFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUgPyAxIDogMCkgLSAoc2Vjb25kLmFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUgPyAxIDogMCk7CiAgICAgICAgfQogICAgfQp9OwoKLyoqCiAqIEFtYWxnYW1hdGVzIHRoZSBnaXZlbiBDb21wYXJpc29uUmVzdWx0IGludG8gdGhpcyBDb21wYXJpc29uUmVzdWx0LgogKgogKiBAcGFyYW0gY29tcGFyaXNvblJlc3VsdCBUaGUgQ29tcGFyaXNvblJlc3VsdCB0byBpbmNsdWRlLgogKi8KQ29tcGFyaXNvblJlc3VsdC5wcm90b3R5cGUuYWRkQ29tcGFyaXNvblJlc3VsdCA9IGZ1bmN0aW9uKGNvbXBhcmlzb25SZXN1bHQpIHsKICAgIHRoaXMucGVuYWx0eVBvaW50cyArPSBjb21wYXJpc29uUmVzdWx0LnBlbmFsdHlQb2ludHM7CiAgICBpZiAoY29tcGFyaXNvblJlc3VsdC5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlKSB7CiAgICAgICAgdGhpcy5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlID0gY29tcGFyaXNvblJlc3VsdC5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlOwogICAgfQp9OwoKLyoqCiAqIFJldHVybnMgdHJ1ZSBpZiBubyBwZW5hbHR5IHBvaW50cyBoYXZlIGJlZW4gYXNzaWduZWQgZm9yIHRoZSBjb21wYXJpc29uLgogKgogKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiB0aGUgY29tcGFyaXNvbiB3YXMgc3VjY2Vzc2Z1bC4KICovCkNvbXBhcmlzb25SZXN1bHQucHJvdG90eXBlLmlzU3VjY2Vzc2Z1bCA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIG51bGxPclVuZGVmaW5lZCh0aGlzLnBlbmFsdHlQb2ludHMpIHx8IHRoaXMucGVuYWx0eVBvaW50cyA9PT0gMDsKfTsKCi8qKgogKiBDb21wYXJlcyB0d28gc2ltcGxlIG9iamVjdHMgKFN0cmluZ3xOdW1iZXIpIGFuZCBpZiB0aGV5IGFyZSBlcXVhbCB0aGVuIHJldHVybnMgYSBDb21wYXJpc29uUmVzdWx0IHdpdGggemVybwogKiBwZW5hbHR5IHBvaW50cyBhc3NpZ25lZCwgb3RoZXJ3aXNlIHJldHVybnMgYSBDb21wYXJpc29uUmVzdWx0IHdpdGggdGhlIGdpdmVuIG51bWJlciBvZiBwZW5hbHR5IHBvaW50cyBhc3NpZ25lZC4KICoKICogQHBhcmFtIGN1cnJlbnRWYWx1ZSAoU3RyaW5nfE51bWJlcikgVGhlIGN1cnJlbnQgdmFsdWUuCiAqIEBwYXJhbSBzdG9yZWRWYWx1ZSAoU3RyaW5nfE51bWJlcikgVGhlIHN0b3JlZCB2YWx1ZS4KICogQHBhcmFtIGNvbmZpZzogewogKiAgICAgICAgICAgICJwZW5hbHR5UG9pbnRzIjogKE51bWJlcikgVGhlIG51bWJlciBvZiBwZW5hbHR5IHBvaW50cy4KICogICAgICAgIH0KICogQHJldHVybiBDb21wYXJpc29uUmVzdWx0LgogKi8KU2NhbGFyQ29tcGFyYXRvci5jb21wYXJlID0gZnVuY3Rpb24gKGN1cnJlbnRWYWx1ZSwgc3RvcmVkVmFsdWUsIGNvbmZpZykgewogICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIlN0cmluZ0NvbXBhcmF0b3IuY29tcGFyZTpjdXJyZW50VmFsdWU6ICIgKyBKU09OLnN0cmluZ2lmeShjdXJyZW50VmFsdWUpKTsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiU3RyaW5nQ29tcGFyYXRvci5jb21wYXJlOnN0b3JlZFZhbHVlOiAiICsgSlNPTi5zdHJpbmdpZnkoc3RvcmVkVmFsdWUpKTsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiU3RyaW5nQ29tcGFyYXRvci5jb21wYXJlOmNvbmZpZzogIiArIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpOwogICAgfQogICAgaWYgKGNvbmZpZy5wZW5hbHR5UG9pbnRzID09PSAwKSB7CiAgICAgICAgcmV0dXJuIENvbXBhcmlzb25SZXN1bHQuWkVST19QRU5BTFRZX1BPSU5UUzsKICAgIH0KCiAgICBpZiAoIW51bGxPclVuZGVmaW5lZChzdG9yZWRWYWx1ZSkpIHsKICAgICAgICBpZiAobnVsbE9yVW5kZWZpbmVkKGN1cnJlbnRWYWx1ZSkgfHwgY3VycmVudFZhbHVlICE9PSBzdG9yZWRWYWx1ZSkgewogICAgICAgICAgICByZXR1cm4gbmV3IENvbXBhcmlzb25SZXN1bHQoY29uZmlnLnBlbmFsdHlQb2ludHMpOwogICAgICAgIH0KICAgIH0gZWxzZSBpZiAoIW51bGxPclVuZGVmaW5lZChjdXJyZW50VmFsdWUpKSB7CiAgICAgICAgcmV0dXJuIG5ldyBDb21wYXJpc29uUmVzdWx0KHRydWUpOwogICAgfQoKICAgIHJldHVybiBDb21wYXJpc29uUmVzdWx0LlpFUk9fUEVOQUxUWV9QT0lOVFM7Cn07CgovKioKICogQ29tcGFyZXMgdHdvIHNjcmVlbnMgYW5kIGlmIHRoZXkgYXJlIGVxdWFsIHRoZW4gcmV0dXJucyBhIENvbXBhcmlzb25SZXN1bHQgd2l0aCB6ZXJvIHBlbmFsdHkgcG9pbnRzIGFzc2lnbmVkLAogKiBvdGhlcndpc2UgcmV0dXJucyBhIENvbXBhcmlzb25SZXN1bHQgd2l0aCB0aGUgZ2l2ZW4gbnVtYmVyIG9mIHBlbmFsdHkgcG9pbnRzIGFzc2lnbmVkLgogKgogKiBAcGFyYW0gY3VycmVudFZhbHVlOiB7CiAqICAgICAgICAgICAgInNjcmVlbldpZHRoIjogKE51bWJlcikgVGhlIGN1cnJlbnQgY2xpZW50IHNjcmVlbiB3aWR0aC4KICogICAgICAgICAgICAic2NyZWVuSGVpZ2h0IjogKE51bWJlcikgVGhlIGN1cnJlbnQgY2xpZW50IHNjcmVlbiBoZWlnaHQuCiAqICAgICAgICAgICAgInNjcmVlbkNvbG91ckRlcHRoIjogKE51bWJlcikgVGhlIGN1cnJlbnQgY2xpZW50IHNjcmVlbiBjb2xvdXIgZGVwdGguCiAqICAgICAgICB9CiAqIEBwYXJhbSBzdG9yZWRWYWx1ZTogewogKiAgICAgICAgICAgICJzY3JlZW5XaWR0aCI6IChOdW1iZXIpIFRoZSBzdG9yZWQgY2xpZW50IHNjcmVlbiB3aWR0aC4KICogICAgICAgICAgICAic2NyZWVuSGVpZ2h0IjogKE51bWJlcikgVGhlIHN0b3JlZCBjbGllbnQgc2NyZWVuIGhlaWdodC4KICogICAgICAgICAgICAic2NyZWVuQ29sb3VyRGVwdGgiOiAoTnVtYmVyKSBUaGUgc3RvcmVkIGNsaWVudCBzY3JlZW4gY29sb3VyIGRlcHRoLgogKiAgICAgICAgfQogKiBAcGFyYW0gY29uZmlnOiB7CiAqICAgICAgICAgICAgInBlbmFsdHlQb2ludHMiOiAoTnVtYmVyKSBUaGUgbnVtYmVyIG9mIHBlbmFsdHkgcG9pbnRzLgogKiAgICAgICAgfQogKiBAcmV0dXJuIENvbXBhcmlzb25SZXN1bHQKICovClNjcmVlbkNvbXBhcmF0b3IuY29tcGFyZSA9IGZ1bmN0aW9uIChjdXJyZW50VmFsdWUsIHN0b3JlZFZhbHVlLCBjb25maWcpIHsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiU2NyZWVuQ29tcGFyYXRvci5jb21wYXJlOmN1cnJlbnRWYWx1ZTogIiArIEpTT04uc3RyaW5naWZ5KGN1cnJlbnRWYWx1ZSkpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJTY3JlZW5Db21wYXJhdG9yLmNvbXBhcmU6c3RvcmVkVmFsdWU6ICIgKyBKU09OLnN0cmluZ2lmeShzdG9yZWRWYWx1ZSkpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJTY3JlZW5Db21wYXJhdG9yLmNvbXBhcmU6Y29uZmlnOiAiICsgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7CgogICAgaWYgKG51bGxPclVuZGVmaW5lZChjdXJyZW50VmFsdWUpKSB7CiAgICAgICAgY3VycmVudFZhbHVlID0ge3NjcmVlbldpZHRoOiBudWxsLCBzY3JlZW5IZWlnaHQ6IG51bGwsIHNjcmVlbkNvbG91ckRlcHRoOiBudWxsfTsKICAgIH0KICAgIGlmIChudWxsT3JVbmRlZmluZWQoc3RvcmVkVmFsdWUpKSB7CiAgICAgICAgc3RvcmVkVmFsdWUgPSB7c2NyZWVuV2lkdGg6IG51bGwsIHNjcmVlbkhlaWdodDogbnVsbCwgc2NyZWVuQ29sb3VyRGVwdGg6IG51bGx9OwogICAgfQoKICAgIHZhciBjb21wYXJpc29uUmVzdWx0cyA9IFsKICAgICAgICBTY2FsYXJDb21wYXJhdG9yLmNvbXBhcmUoY3VycmVudFZhbHVlLnNjcmVlbldpZHRoLCBzdG9yZWRWYWx1ZS5zY3JlZW5XaWR0aCwgY29uZmlnKSwKICAgICAgICBTY2FsYXJDb21wYXJhdG9yLmNvbXBhcmUoY3VycmVudFZhbHVlLnNjcmVlbkhlaWdodCwgc3RvcmVkVmFsdWUuc2NyZWVuSGVpZ2h0LCBjb25maWcpLAogICAgICAgIFNjYWxhckNvbXBhcmF0b3IuY29tcGFyZShjdXJyZW50VmFsdWUuc2NyZWVuQ29sb3VyRGVwdGgsIHN0b3JlZFZhbHVlLnNjcmVlbkNvbG91ckRlcHRoLCBjb25maWcpXTsKCiAgICBpZiAoYWxsKGNvbXBhcmlzb25SZXN1bHRzLCBDb21wYXJpc29uUmVzdWx0LmlzU3VjY2Vzc2Z1bCkpIHsKICAgICAgICByZXR1cm4gbmV3IENvbXBhcmlzb25SZXN1bHQoYW55KGNvbXBhcmlzb25SZXN1bHRzLCBDb21wYXJpc29uUmVzdWx0LmFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUpKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG5ldyBDb21wYXJpc29uUmVzdWx0KGNvbmZpZy5wZW5hbHR5UG9pbnRzKTsKICAgIH0KfTsKCi8qKgogKiBTcGxpdHMgYm90aCB2YWx1ZXMgdXNpbmcgZGVsaW1pdGVyLCB0cmltcyBldmVyeSB2YWx1ZSBhbmQgY29tcGFyZXMgY29sbGVjdGlvbnMgb2YgdmFsdWVzLgogKiBSZXR1cm5zIHplcm8tcmVzdWx0IGZvciBzYW1lIG11bHRpLXZhbHVlIGF0dHJpYnV0ZXMuCiAqCiAqIElmIGNvbGxlY3Rpb25zIGFyZSBub3Qgc2FtZSBjaGVja3MgaWYgbnVtYmVyIG9mIGRpZmZlcmVuY2VzIGlzIGxlc3Mgb3IgZXF1YWwgbWF4RGlmZmVyZW5jZXMgb3IKICogcGVyY2VudGFnZSBvZiBkaWZmZXJlbmNlIGlzIGxlc3Mgb3IgZXF1YWwgbWF4UGVyY2VudGFnZURpZmZlcmVuY2UuCiAqCiAqIElmIHllcyB0aGVuIHJldHVybnMgemVyby1yZXN1bHQgd2l0aCBhZGRpdGlvbmFsIGluZm8sIGVsc2UgcmV0dXJucyBwZW5hbHR5UG9pbnRzLXJlc3VsdC4KICoKICogQHBhcmFtIGN1cnJlbnRWYWx1ZTogKFN0cmluZykgVGhlIGN1cnJlbnQgdmFsdWUuCiAqIEBwYXJhbSBzdG9yZWRWYWx1ZTogKFN0cmluZykgVGhlIHN0b3JlZCB2YWx1ZS4KICogQHBhcmFtIGNvbmZpZzogewogKiAgICAgICAgICAgICJtYXhQZXJjZW50YWdlRGlmZmVyZW5jZSI6IChOdW1iZXIpIFRoZSBtYXggZGlmZmVyZW5jZSBwZXJjZW50YWdlIGluIHRoZSB2YWx1ZXMsCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoZSBwZW5hbHR5IGlzIGFzc2lnbmVkLgogKiAgICAgICAgICAgICJtYXhEaWZmZXJlbmNlcyI6IChOdW1iZXIpIFRoZSBtYXggbnVtYmVyIG9mIGRpZmZlcmVuY2VzIGluIHRoZSB2YWx1ZXMsCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoZSBwZW5hbHR5IHBvaW50cyBhcmUgYXNzaWduZWQuCiAqICAgICAgICAgICAgInBlbmFsdHlQb2ludHMiOiAoTnVtYmVyKSBUaGUgbnVtYmVyIG9mIHBlbmFsdHkgcG9pbnRzLgogICogICAgICAgIH0KICogQHJldHVybiBDb21wYXJpc29uUmVzdWx0CiAqLwpNdWx0aVZhbHVlQ29tcGFyYXRvci5jb21wYXJlID0gZnVuY3Rpb24gKGN1cnJlbnRWYWx1ZSwgc3RvcmVkVmFsdWUsIGNvbmZpZykgewogICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIk11bHRpVmFsdWVDb21wYXJhdG9yLmNvbXBhcmU6Y3VycmVudFZhbHVlOiAiICsgSlNPTi5zdHJpbmdpZnkoY3VycmVudFZhbHVlKSk7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIk11bHRpVmFsdWVDb21wYXJhdG9yLmNvbXBhcmU6c3RvcmVkVmFsdWU6ICIgKyBKU09OLnN0cmluZ2lmeShzdG9yZWRWYWx1ZSkpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJNdWx0aVZhbHVlQ29tcGFyYXRvci5jb21wYXJlOmNvbmZpZzogIiArIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpOwogICAgfQoKICAgIHZhciBkZWxpbWl0ZXIgPSAiOyIsCiAgICAgICAgY3VycmVudFZhbHVlcyA9IHNwbGl0QW5kVHJpbShjdXJyZW50VmFsdWUsIGRlbGltaXRlciksCiAgICAgICAgc3RvcmVkVmFsdWVzID0gc3BsaXRBbmRUcmltKHN0b3JlZFZhbHVlLCBkZWxpbWl0ZXIpLAogICAgICAgIG1heE51bWJlck9mRWxlbWVudHMgPSBNYXRoLm1heChjdXJyZW50VmFsdWVzLmxlbmd0aCwgc3RvcmVkVmFsdWVzLmxlbmd0aCksCiAgICAgICAgbnVtYmVyT2ZUaGVTYW1lRWxlbWVudHMgPSBjYWxjdWxhdGVJbnRlcnNlY3Rpb24oY3VycmVudFZhbHVlcywgc3RvcmVkVmFsdWVzKS5sZW5ndGgsCiAgICAgICAgbnVtYmVyT2ZEaWZmZXJlbmNlcyA9IG1heE51bWJlck9mRWxlbWVudHMgLSBudW1iZXJPZlRoZVNhbWVFbGVtZW50cywKICAgICAgICBwZXJjZW50YWdlT2ZEaWZmZXJlbmNlcyA9IGNhbGN1bGF0ZVBlcmNlbnRhZ2UobnVtYmVyT2ZEaWZmZXJlbmNlcywgbWF4TnVtYmVyT2ZFbGVtZW50cyk7CgogICAgaWYgKG51bGxPclVuZGVmaW5lZChzdG9yZWRWYWx1ZSkgJiYgIW51bGxPclVuZGVmaW5lZChjdXJyZW50VmFsdWUpKSB7CiAgICAgICAgcmV0dXJuIG5ldyBDb21wYXJpc29uUmVzdWx0KHRydWUpOwogICAgfQoKICAgIGlmIChsb2dnZXIubWVzc2FnZUVuYWJsZWQoKSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKG51bWJlck9mVGhlU2FtZUVsZW1lbnRzICsgIiBvZiAiICsgbWF4TnVtYmVyT2ZFbGVtZW50cyArICIgYXJlIHNhbWUiKTsKICAgIH0KCiAgICBpZiAobWF4TnVtYmVyT2ZFbGVtZW50cyA9PT0gMCkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJJZ25vcmVkIGJlY2F1c2Ugbm8gYXR0cmlidXRlcyBmb3VuZCBpbiBib3RoIHByb2ZpbGVzIik7CiAgICAgICAgcmV0dXJuIENvbXBhcmlzb25SZXN1bHQuWkVST19QRU5BTFRZX1BPSU5UUzsKICAgIH0KCiAgICBpZiAobnVtYmVyT2ZUaGVTYW1lRWxlbWVudHMgPT09IG1heE51bWJlck9mRWxlbWVudHMpIHsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiSWdub3JlZCBiZWNhdXNlIGFsbCBhdHRyaWJ1dGVzIGFyZSBzYW1lIik7CiAgICAgICAgcmV0dXJuIENvbXBhcmlzb25SZXN1bHQuWkVST19QRU5BTFRZX1BPSU5UUzsKICAgIH0KCiAgICBpZiAobnVtYmVyT2ZEaWZmZXJlbmNlcyA+IGNvbmZpZy5tYXhEaWZmZXJlbmNlcykgewogICAgICAgIGlmIChsb2dnZXIubWVzc2FnZUVuYWJsZWQoKSkgewogICAgICAgICAgICBsb2dnZXIubWVzc2FnZSgiV291bGQgYmUgaWdub3JlZCBpZiBub3QgbW9yZSB0aGFuICIgKyBjb25maWcubWF4RGlmZmVyZW5jZXMgKyAiIGRpZmZlcmVuY2VzIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgQ29tcGFyaXNvblJlc3VsdChjb25maWcucGVuYWx0eVBvaW50cyk7CiAgICB9CgogICAgaWYgKHBlcmNlbnRhZ2VPZkRpZmZlcmVuY2VzID4gY29uZmlnLm1heFBlcmNlbnRhZ2VEaWZmZXJlbmNlKSB7CiAgICAgICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKHBlcmNlbnRhZ2VPZkRpZmZlcmVuY2VzICsgIiBwZXJjZW50cyBhcmUgZGlmZmVyZW50Iik7CiAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJXb3VsZCBiZSBpZ25vcmVkIGlmIG5vdCBtb3JlIHRoYW4gIiArIGNvbmZpZy5tYXhQZXJjZW50YWdlRGlmZmVyZW5jZSArICIgcGVyY2VudCIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IENvbXBhcmlzb25SZXN1bHQoY29uZmlnLnBlbmFsdHlQb2ludHMpOwogICAgfQoKICAgIGlmIChsb2dnZXIubWVzc2FnZUVuYWJsZWQoKSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJJZ25vcmVkIGJlY2F1c2UgbnVtYmVyIG9mIGRpZmZlcmVuY2VzKCIgKyBudW1iZXJPZkRpZmZlcmVuY2VzICsgIikgbm90IG1vcmUgdGhhbiAiCiAgICAgICAgICAgICsgY29uZmlnLm1heERpZmZlcmVuY2VzKTsKICAgICAgICBsb2dnZXIubWVzc2FnZShwZXJjZW50YWdlT2ZEaWZmZXJlbmNlcyArICIgcGVyY2VudHMgYXJlIGRpZmZlcmVudCIpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJJZ25vcmVkIGJlY2F1c2Ugbm90IG1vcmUgdGhhbiAiICsgY29uZmlnLm1heFBlcmNlbnRhZ2VEaWZmZXJlbmNlICsgIiBwZXJjZW50Iik7CiAgICB9CiAgICByZXR1cm4gbmV3IENvbXBhcmlzb25SZXN1bHQodHJ1ZSk7Cn07CgovKioKICogQ29tcGFyZXMgdHdvIFVzZXIgQWdlbnQgU3RyaW5ncyBhbmQgaWYgdGhleSBhcmUgZXF1YWwgdGhlbiByZXR1cm5zIGEgQ29tcGFyaXNvblJlc3VsdCB3aXRoIHplcm8gcGVuYWx0eQogKiBwb2ludHMgYXNzaWduZWQsIG90aGVyd2lzZSByZXR1cm5zIGEgQ29tcGFyaXNvblJlc3VsdCB3aXRoIHRoZSBnaXZlbiBudW1iZXIgb2YgcGVuYWx0eSBwb2ludHMgYXNzaWduZWQuCiAqCiAqIEBwYXJhbSBjdXJyZW50VmFsdWUgKFN0cmluZykgVGhlIGN1cnJlbnQgdmFsdWUuCiAqIEBwYXJhbSBzdG9yZWRWYWx1ZSAoU3RyaW5nKSBUaGUgc3RvcmVkIHZhbHVlLgogKiBAcGFyYW0gY29uZmlnOiB7CiAqICAgICAgICAgICAgImlnbm9yZVZlcnNpb24iOiAoYm9vbGVhbikgSWYgdGhlIHZlcnNpb24gbnVtYmVycyBpbiB0aGUgVXNlciBBZ2VudCBTdHJpbmdzIHNob3VsZCBiZSBpZ25vcmUKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY29tcGFyaXNvbi4KICogICAgICAgICAgICAicGVuYWx0eVBvaW50cyI6IChOdW1iZXIpIFRoZSBudW1iZXIgb2YgcGVuYWx0eSBwb2ludHMuCiAqICAgICAgICB9CiAqIEByZXR1cm4gQSBDb21wYXJpc29uUmVzdWx0LgogKi8KVXNlckFnZW50Q29tcGFyYXRvci5jb21wYXJlID0gZnVuY3Rpb24gKGN1cnJlbnRWYWx1ZSwgc3RvcmVkVmFsdWUsIGNvbmZpZykgewogICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIlVzZXJBZ2VudENvbXBhcmF0b3IuY29tcGFyZTpjdXJyZW50VmFsdWU6ICIgKyBKU09OLnN0cmluZ2lmeShjdXJyZW50VmFsdWUpKTsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiVXNlckFnZW50Q29tcGFyYXRvci5jb21wYXJlOnN0b3JlZFZhbHVlOiAiICsgSlNPTi5zdHJpbmdpZnkoc3RvcmVkVmFsdWUpKTsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiVXNlckFnZW50Q29tcGFyYXRvci5jb21wYXJlOmNvbmZpZzogIiArIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpOwogICAgfQoKICAgIGlmIChjb25maWcuaWdub3JlVmVyc2lvbikgewogICAgICAgIC8vIHJlbW92ZSB2ZXJzaW9uIG51bWJlcgogICAgICAgIGN1cnJlbnRWYWx1ZSA9IG51bGxPclVuZGVmaW5lZChjdXJyZW50VmFsdWUpID8gbnVsbCA6IGN1cnJlbnRWYWx1ZS5yZXBsYWNlKC9bXGRcLl0rL2csICIiKS50cmltKCk7CiAgICAgICAgc3RvcmVkVmFsdWUgPSBudWxsT3JVbmRlZmluZWQoc3RvcmVkVmFsdWUpID8gbnVsbCA6IHN0b3JlZFZhbHVlLnJlcGxhY2UoL1tcZFwuXSsvZywgIiIpLnRyaW0oKTsKICAgIH0KCiAgICByZXR1cm4gU2NhbGFyQ29tcGFyYXRvci5jb21wYXJlKGN1cnJlbnRWYWx1ZSwgc3RvcmVkVmFsdWUsIGNvbmZpZyk7Cn07CgovKioKICogQ29tcGFyZXMgdHdvIGxvY2F0aW9ucywgdGFraW5nIGludG8gYWNjb3VudCBhIGRlZ3JlZSBvZiBkaWZmZXJlbmNlLgogKgogKiBAcGFyYW0gY3VycmVudFZhbHVlOiB7CiAqICAgICAgICAgICAgImxhdGl0dWRlIjogKE51bWJlcikgVGhlIGN1cnJlbnQgbGF0aXR1ZGUuCiAqICAgICAgICAgICAgImxvbmdpdHVkZSI6IChOdW1iZXIpIFRoZSBjdXJyZW50IGxvbmdpdHVkZS4KICogICAgICAgIH0KICogQHBhcmFtIHN0b3JlZFZhbHVlOiB7CiAqICAgICAgICAgICAgImxhdGl0dWRlIjogKE51bWJlcikgVGhlIHN0b3JlZCBsYXRpdHVkZS4KICogICAgICAgICAgICAibG9uZ2l0dWRlIjogKE51bWJlcikgVGhlIHN0b3JlZCBsb25naXR1ZGUuCiAqICAgICAgICB9CiAqIEBwYXJhbSBjb25maWc6IHsKICogICAgICAgICAgICAiYWxsb3dlZFJhbmdlIjogKE51bWJlcikgVGhlIG1heCBkaWZmZXJlbmNlIGFsbG93ZWQgaW4gdGhlIHR3byBsb2NhdGlvbnMsIGJlZm9yZSB0aGUgcGVuYWx0eSBpcyBhc3NpZ25lZC4KICogICAgICAgICAgICAicGVuYWx0eVBvaW50cyI6IChOdW1iZXIpIFRoZSBudW1iZXIgb2YgcGVuYWx0eSBwb2ludHMuCiogICAgICAgICB9CiAqIEByZXR1cm4gQ29tcGFyaXNvblJlc3VsdAogKi8KR2VvbG9jYXRpb25Db21wYXJhdG9yLmNvbXBhcmUgPSBmdW5jdGlvbiAoY3VycmVudFZhbHVlLCBzdG9yZWRWYWx1ZSwgY29uZmlnKSB7CiAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiR2VvbG9jYXRpb25Db21wYXJhdG9yLmNvbXBhcmU6Y3VycmVudFZhbHVlOiAiICsgSlNPTi5zdHJpbmdpZnkoY3VycmVudFZhbHVlKSk7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIkdlb2xvY2F0aW9uQ29tcGFyYXRvci5jb21wYXJlOnN0b3JlZFZhbHVlOiAiICsgSlNPTi5zdHJpbmdpZnkoc3RvcmVkVmFsdWUpKTsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiR2VvbG9jYXRpb25Db21wYXJhdG9yLmNvbXBhcmU6Y29uZmlnOiAiICsgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7CiAgICB9CgogICAgLy8gQ2hlY2sgZm9yIHVuZGVmaW5lZCBzdG9yZWQgb3IgY3VycmVudCBsb2NhdGlvbnMKCiAgICBpZiAodW5kZWZpbmVkTG9jYXRpb24oY3VycmVudFZhbHVlKSAmJiB1bmRlZmluZWRMb2NhdGlvbihzdG9yZWRWYWx1ZSkpIHsKICAgICAgICByZXR1cm4gQ29tcGFyaXNvblJlc3VsdC5aRVJPX1BFTkFMVFlfUE9JTlRTOwogICAgfQogICAgaWYgKHVuZGVmaW5lZExvY2F0aW9uKGN1cnJlbnRWYWx1ZSkgJiYgIXVuZGVmaW5lZExvY2F0aW9uKHN0b3JlZFZhbHVlKSkgewogICAgICAgIHJldHVybiBuZXcgQ29tcGFyaXNvblJlc3VsdChjb25maWcucGVuYWx0eVBvaW50cyk7CiAgICB9CiAgICBpZiAoIXVuZGVmaW5lZExvY2F0aW9uKGN1cnJlbnRWYWx1ZSkgJiYgdW5kZWZpbmVkTG9jYXRpb24oc3RvcmVkVmFsdWUpKSB7CiAgICAgICAgcmV0dXJuIG5ldyBDb21wYXJpc29uUmVzdWx0KHRydWUpOwogICAgfQoKICAgIC8vIEJvdGggbG9jYXRpb25zIGRlZmluZWQsIHRoZXJlZm9yZSBwZXJmb3JtIGNvbXBhcmlzb24KCiAgICB2YXIgZGlzdGFuY2UgPSBjYWxjdWxhdGVEaXN0YW5jZShjdXJyZW50VmFsdWUsIHN0b3JlZFZhbHVlKTsKCiAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiRGlzdGFuY2UgYmV0d2VlbiAoIiArIGN1cnJlbnRWYWx1ZS5sYXRpdHVkZSArICIsIiArIGN1cnJlbnRWYWx1ZS5sb25naXR1ZGUgKyAiKSBhbmQgKCIgKwogICAgICAgICAgICBzdG9yZWRWYWx1ZS5sYXRpdHVkZSArICIsIiArIHN0b3JlZFZhbHVlLmxvbmdpdHVkZSArICIpIGlzICIgKyBkaXN0YW5jZSArICIgbWlsZXMiKTsKICAgIH0KCiAgICBpZiAocGFyc2VGbG9hdChkaXN0YW5jZS50b1ByZWNpc2lvbig1KSkgPT09IDApIHsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiTG9jYXRpb24gaXMgdGhlIHNhbWUiKTsKICAgICAgICByZXR1cm4gQ29tcGFyaXNvblJlc3VsdC5aRVJPX1BFTkFMVFlfUE9JTlRTOwogICAgfQoKICAgIGlmIChkaXN0YW5jZSA8PSBjb25maWcuYWxsb3dlZFJhbmdlKSB7CiAgICAgICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJUb2xlcmF0ZWQgYmVjYXVzZSBkaXN0YW5jZSBub3QgbW9yZSB0aGVuICIgKyBjb25maWcuYWxsb3dlZFJhbmdlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBDb21wYXJpc29uUmVzdWx0KHRydWUpOwogICAgfSBlbHNlIHsKICAgICAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIldvdWxkIGJlIGlnbm9yZWQgaWYgZGlzdGFuY2Ugbm90IG1vcmUgdGhlbiAiICsgY29uZmlnLmFsbG93ZWRSYW5nZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgQ29tcGFyaXNvblJlc3VsdChjb25maWcucGVuYWx0eVBvaW50cyk7CiAgICB9Cn07CgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLwovLyAgICAgICAgICAgICAgICAgICAgRGV2aWNlIFByaW50IExvZ2ljIC0gRE8gTk9UIE1PRElGWSAgICAgICAgICAgICAgICAgICAgIC8vCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KCi8vIFV0aWxpdHkgZnVuY3Rpb25zCgovKioKICogUmV0dXJucyB0cnVlIGlmIGV2YWx1YXRpbmcgZnVuY3Rpb24gZiBvbiBlYWNoIGVsZW1lbnQgb2YgdGhlIEFycmF5IGEgcmV0dXJucyB0cnVlLgogKgogKiBAcGFyYW0gYTogKEFycmF5KSBUaGUgYXJyYXkgb2YgZWxlbWVudHMgdG8gZXZhbHVhdGUKICogQHBhcmFtIGY6IChGdW5jdGlvbikgQSBzaW5nbGUgYXJndW1lbnQgZnVuY3Rpb24gZm9yIG1hcHBpbmcgZWxlbWVudHMgb2YgdGhlIGFycmF5IHRvIGJvb2xlYW4uCiAqIEByZXR1cm4gYm9vbGVhbi4KICovCmFsbCA9IGZ1bmN0aW9uKGEsIGYpIHsKICAgIHZhciBpOwogICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoZihhW2ldKSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0cnVlOwp9OwoKLyoqCiAqIFJldHVybnMgdHJ1ZSBpZiBldmFsdWF0aW5nIGZ1bmN0aW9uIGYgb24gYW55IGVsZW1lbnQgb2YgdGhlIEFycmF5IGEgcmV0dXJucyB0cnVlLgogKgogKiBAcGFyYW0gYTogKEFycmF5KSBUaGUgYXJyYXkgb2YgZWxlbWVudHMgdG8gZXZhbHVhdGUKICogQHBhcmFtIGY6IChGdW5jdGlvbikgQSBzaW5nbGUgYXJndW1lbnQgZnVuY3Rpb24gZm9yIG1hcHBpbmcgZWxlbWVudHMgb2YgdGhlIGFycmF5IHRvIGJvb2xlYW4uCiAqIEByZXR1cm4gYm9vbGVhbi4KICovCmFueSA9IGZ1bmN0aW9uKGEsIGYpIHsKICAgIHZhciBpOwogICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoZihhW2ldKSA9PT0gdHJ1ZSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gZmFsc2U7Cn07CgovKioKICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBsb2NhdGlvbiBpcyBudWxsIG9yIGhhcyB1bmRlZmluZWQgbG9uZ2l0dWRlIG9yIGxhdGl0dWRlIHZhbHVlcy4KICoKICogQHBhcmFtIGxvY2F0aW9uOiB7CiAqICAgICAgICAgICAgImxhdGl0dWRlIjogKE51bWJlcikgVGhlIGxhdGl0dWRlLgogKiAgICAgICAgICAgICJsb25naXR1ZGUiOiAoTnVtYmVyKSBUaGUgbG9uZ2l0dWRlLgogKiAgICAgICAgfQogKiBAcmV0dXJuIGJvb2xlYW4KICovCnVuZGVmaW5lZExvY2F0aW9uID0gZnVuY3Rpb24obG9jYXRpb24pIHsKICAgIHJldHVybiBudWxsT3JVbmRlZmluZWQobG9jYXRpb24pIHx8IG51bGxPclVuZGVmaW5lZChsb2NhdGlvbi5sYXRpdHVkZSkgfHwgbnVsbE9yVW5kZWZpbmVkKGxvY2F0aW9uLmxvbmdpdHVkZSk7Cn07CgovKioKICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsIG9yIHVuZGVmaW5lZC4KICoKICogQHBhcmFtIHZhbHVlOiBhIHZhbHVlIG9mIGFueSB0eXBlCiAqIEByZXR1cm4gYm9vbGVhbgogKi8KbnVsbE9yVW5kZWZpbmVkID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkOwp9OwoKLyoqCiAqIENhbGN1bGF0ZXMgdGhlIGRpc3RhbmNlcyBiZXR3ZWVuIHRoZSB0d28gbG9jYXRpb25zLgogKgogKiBAcGFyYW0gZmlyc3Q6IHsKICogICAgICAgICAgICAibGF0aXR1ZGUiOiAoTnVtYmVyKSBUaGUgZmlyc3QgbGF0aXR1ZGUuCiAqICAgICAgICAgICAgImxvbmdpdHVkZSI6IChOdW1iZXIpIFRoZSBmaXJzdCBsb25naXR1ZGUuCiAqICAgICAgICB9CiAqIEBwYXJhbSBzZWNvbmQ6IHsKICogICAgICAgICAgICAibGF0aXR1ZGUiOiAoTnVtYmVyKSBUaGUgc2Vjb25kIGxhdGl0dWRlLgogKiAgICAgICAgICAgICJsb25naXR1ZGUiOiAoTnVtYmVyKSBUaGUgc2Vjb25kIGxvbmdpdHVkZS4KICogICAgICAgIH0KICogQHJldHVybiBOdW1iZXIgVGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHR3byBsb2NhdGlvbnMuCiAqLwpjYWxjdWxhdGVEaXN0YW5jZSA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQpIHsKICAgIHZhciBmYWN0b3IgPSAoTWF0aC5QSSAvIDE4MCksCiAgICAgICAgdGhldGEsCiAgICAgICAgZGlzdDsKICAgIGZ1bmN0aW9uIGRlZ3JlZXNUb1JhZGlhbnMoZGVncmVlcykgewogICAgICAgIHJldHVybiBkZWdyZWVzICogZmFjdG9yOwogICAgfQogICAgZnVuY3Rpb24gcmFkaWFuc1RvRGVncmVlcyhyYWRpYW5zKSB7CiAgICAgICAgcmV0dXJuIHJhZGlhbnMgLyBmYWN0b3I7CiAgICB9CiAgICB0aGV0YSA9IGZpcnN0LmxvbmdpdHVkZSAtIHNlY29uZC5sb25naXR1ZGU7CiAgICBkaXN0ID0gTWF0aC5zaW4oZGVncmVlc1RvUmFkaWFucyhmaXJzdC5sYXRpdHVkZSkpICogTWF0aC5zaW4oZGVncmVlc1RvUmFkaWFucyhzZWNvbmQubGF0aXR1ZGUpKQogICAgICAgICsgTWF0aC5jb3MoZGVncmVlc1RvUmFkaWFucyhmaXJzdC5sYXRpdHVkZSkpICogTWF0aC5jb3MoZGVncmVlc1RvUmFkaWFucyhzZWNvbmQubGF0aXR1ZGUpKQogICAgICAgICogTWF0aC5jb3MoZGVncmVlc1RvUmFkaWFucyh0aGV0YSkpOwogICAgZGlzdCA9IE1hdGguYWNvcyhkaXN0KTsKICAgIGRpc3QgPSByYWRpYW5zVG9EZWdyZWVzKGRpc3QpOwogICAgZGlzdCA9IGRpc3QgKiA2MCAqIDEuMTUxNTsKICAgIHJldHVybiBkaXN0Owp9OwoKLyoqCiAqIENvbnZlcnRzIGEgU3RyaW5nIGhvbGRpbmcgYSBkZWxpbWl0ZWQgc2VxdWVuY2Ugb2YgdmFsdWVzIGludG8gYW4gYXJyYXkuCiAqCiAqIEBwYXJhbSB0ZXh0IChTdHJpbmcpIFRoZSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBkZWxpbWl0ZWQgc2VxdWVuY2Ugb2YgdmFsdWVzLgogKiBAcGFyYW0gZGVsaW1pdGVyIChTdHJpbmcpIFRoZSBjaGFyYWN0ZXIgZGVsaW1pdGluZyB2YWx1ZXMgd2l0aGluIHRoZSB0ZXh0IFN0cmluZy4KICogQHJldHVybiAoQXJyYXkpIFRoZSBjb21tYSBzZXBhcmF0ZWQgdmFsdWVzLgogKi8Kc3BsaXRBbmRUcmltID0gZnVuY3Rpb24odGV4dCwgZGVsaW1pdGVyKSB7CgogICAgdmFyIHJlc3VsdHMgPSBbXSwKICAgICAgICBpLAogICAgICAgIHZhbHVlcywKICAgICAgICB2YWx1ZTsKICAgIGlmICh0ZXh0ID09PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICB9CgogICAgdmFsdWVzID0gdGV4dC5zcGxpdChkZWxpbWl0ZXIpOwogICAgZm9yIChpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhbHVlID0gdmFsdWVzW2ldLnRyaW0oKTsKICAgICAgICBpZiAodmFsdWUgIT09ICIiKSB7CiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh2YWx1ZSk7CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiByZXN1bHRzOwp9OwoKLyoqCiAqIENvbnZlcnRzIHZhbHVlIHRvIGEgcGVyY2VudGFnZSBvZiByYW5nZS4KICoKICogQHBhcmFtIHZhbHVlIChOdW1iZXIpIFRoZSBhY3R1YWwgbnVtYmVyIHRvIGJlIGNvbnZlcnRlZCB0byBhIHBlcmNlbnRhZ2UuCiAqIEBwYXJhbSByYW5nZSAoTnVtYmVyKSBUaGUgdG90YWwgbnVtYmVyIG9mIHZhbHVlcyAoaS5lLiByZXByZXNlbnRzIDEwMCUpLgogKiBAcmV0dXJuIChOdW1iZXIpIFRoZSBwZXJjZW50YWdlLgogKi8KY2FsY3VsYXRlUGVyY2VudGFnZSA9IGZ1bmN0aW9uKHZhbHVlLCByYW5nZSkgewogICAgaWYgKHJhbmdlID09PSAwKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICByZXR1cm4gcGFyc2VGbG9hdCgodmFsdWUgLyByYW5nZSkudG9QcmVjaXNpb24oMikpICogMTAwOwp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29udGFpbmluZyBvbmx5IHRob3NlIGVsZW1lbnRzIGZvdW5kIGluIGJvdGggYXJyYXlzIHJlY2VpdmVkIGFzIGFyZ3VtZW50cy4KICoKICogQHBhcmFtIGZpcnN0IChBcnJheSkgVGhlIGZpcnN0IGFycmF5LgogKiBAcGFyYW0gc2Vjb25kIChBcnJheSkgVGhlIHNlY29uZCBhcnJheS4KICogQHJldHVybiAoQXJyYXkpIFRoZSBlbGVtZW50cyB0aGF0IGZvdW5kIGluIGZpcnN0IGFuZCBzZWNvbmQuCiAqLwpjYWxjdWxhdGVJbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kKSB7CiAgICByZXR1cm4gZmlyc3QuZmlsdGVyKGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICByZXR1cm4gc2Vjb25kLmluZGV4T2YoZWxlbWVudCkgIT09IC0xOwogICAgfSk7Cn07CgpmdW5jdGlvbiBnZXRWYWx1ZShvYmosIGF0dHJpYnV0ZVBhdGgpIHsKICAgIHZhciB2YWx1ZSA9IG9iaiwKICAgICAgICBpOwogICAgZm9yIChpID0gMDsgaSA8IGF0dHJpYnV0ZVBhdGgubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgdmFsdWUgPSB2YWx1ZVthdHRyaWJ1dGVQYXRoW2ldXTsKICAgIH0KICAgIHJldHVybiB2YWx1ZTsKfQoKCmZ1bmN0aW9uIGlzTGVhZk5vZGUoYXR0cmlidXRlQ29uZmlnKSB7CiAgICByZXR1cm4gYXR0cmlidXRlQ29uZmlnLmNvbXBhcmF0b3IgIT09IHVuZGVmaW5lZDsKfQoKZnVuY3Rpb24gZ2V0QXR0cmlidXRlUGF0aHMoYXR0cmlidXRlQ29uZmlnLCBhdHRyaWJ1dGVQYXRoKSB7CgogICAgdmFyIGF0dHJpYnV0ZVBhdGhzID0gW10sCiAgICAgICAgYXR0cmlidXRlTmFtZSwKICAgICAgICBhdHRyUGF0aHMsCiAgICAgICAgYXR0clBhdGgsCiAgICAgICAgaTsKCiAgICBmb3IgKGF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlQ29uZmlnKSB7CiAgICAgICAgaWYgKGF0dHJpYnV0ZUNvbmZpZy5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSkgewoKICAgICAgICAgICAgaWYgKGlzTGVhZk5vZGUoYXR0cmlidXRlQ29uZmlnW2F0dHJpYnV0ZU5hbWVdKSkgewogICAgICAgICAgICAgICAgYXR0clBhdGggPSBhdHRyaWJ1dGVQYXRoLnNsaWNlKCk7CiAgICAgICAgICAgICAgICBhdHRyUGF0aC5wdXNoKGF0dHJpYnV0ZU5hbWUpOwogICAgICAgICAgICAgICAgYXR0cmlidXRlUGF0aHMucHVzaChhdHRyUGF0aCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhdHRyUGF0aCA9IGF0dHJpYnV0ZVBhdGguc2xpY2UoKTsKICAgICAgICAgICAgICAgIGF0dHJQYXRoLnB1c2goYXR0cmlidXRlTmFtZSk7CiAgICAgICAgICAgICAgICBhdHRyUGF0aHMgPSBnZXRBdHRyaWJ1dGVQYXRocyhhdHRyaWJ1dGVDb25maWdbYXR0cmlidXRlTmFtZV0sIGF0dHJQYXRoKTsKICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhdHRyUGF0aHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVQYXRocy5wdXNoKGF0dHJQYXRoc1tpXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIGF0dHJpYnV0ZVBhdGhzOwp9CgpmdW5jdGlvbiBnZXREZXZpY2VQcmludEF0dHJpYnV0ZVBhdGhzKGF0dHJpYnV0ZUNvbmZpZykgewogICAgcmV0dXJuIGdldEF0dHJpYnV0ZVBhdGhzKGF0dHJpYnV0ZUNvbmZpZywgW10pOwp9CgpmdW5jdGlvbiBoYXNSZXF1aXJlZEF0dHJpYnV0ZXMoZGV2aWNlUHJpbnQsIGF0dHJpYnV0ZUNvbmZpZykgewoKICAgIHZhciBhdHRyaWJ1dGVQYXRocyA9IGdldERldmljZVByaW50QXR0cmlidXRlUGF0aHMoYXR0cmlidXRlQ29uZmlnKSwKICAgICAgICBpLAogICAgICAgIGF0dHJWYWx1ZSwKICAgICAgICBhdHRyQ29uZmlnOwoKICAgIGZvciAoaSA9IDA7IGkgPCBhdHRyaWJ1dGVQYXRocy5sZW5ndGg7IGkrKykgewoKICAgICAgICBhdHRyVmFsdWUgPSBnZXRWYWx1ZShkZXZpY2VQcmludCwgYXR0cmlidXRlUGF0aHNbaV0pOwogICAgICAgIGF0dHJDb25maWcgPSBnZXRWYWx1ZShhdHRyaWJ1dGVDb25maWcsIGF0dHJpYnV0ZVBhdGhzW2ldKTsKCiAgICAgICAgaWYgKGF0dHJDb25maWcucmVxdWlyZWQgJiYgYXR0clZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIkRldmljZSBQcmludCBwcm9maWxlIG1pc3NpbmcgcmVxdWlyZWQgYXR0cmlidXRlLCAiICsgYXR0cmlidXRlUGF0aHNbaV0pOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIGxvZ2dlci5tZXNzYWdlKCJkZXZpY2UgcHJpbnQgaGFzIHJlcXVpcmVkIGF0dHJpYnV0ZXMiKTsKICAgIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBjb21wYXJlRGV2aWNlUHJpbnRQcm9maWxlcyhhdHRyaWJ1dGVDb25maWcsIGRldmljZVByaW50LCBkZXZpY2VQcmludFByb2ZpbGVzLCBtYXhQZW5hbHR5UG9pbnRzKSB7CgogICAgdmFyIGF0dHJpYnV0ZVBhdGhzID0gZ2V0RGV2aWNlUHJpbnRBdHRyaWJ1dGVQYXRocyhhdHRyaWJ1dGVDb25maWcpLAogICAgICAgIGRhbyA9IHNoYXJlZFN0YXRlLmdldCgnX0RldmljZUlkRGFvJyksCiAgICAgICAgcmVzdWx0cywKICAgICAgICBqLAogICAgICAgIGFnZ3JlZ2F0ZWRDb21wYXJpc29uUmVzdWx0LAogICAgICAgIGksCiAgICAgICAgY3VycmVudFZhbHVlLAogICAgICAgIHN0b3JlZFZhbHVlLAogICAgICAgIGF0dHJDb25maWcsCiAgICAgICAgY29tcGFyaXNvblJlc3VsdCwKICAgICAgICBzZWxlY3RlZENvbXBhcmlzb25SZXN1bHQsCiAgICAgICAgc2VsZWN0ZWRQcm9maWxlLAogICAgICAgIGN1ckRldmljZVByaW50UHJvZmlsZSwKICAgICAgICB2YWxzOwoKICAgIHJlc3VsdHMgPSBbXTsKICAgIGZvciAoaiA9IDA7IGogPCBkZXZpY2VQcmludFByb2ZpbGVzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgY3VyRGV2aWNlUHJpbnRQcm9maWxlID0gZGV2aWNlUHJpbnRQcm9maWxlc1tqXTsKICAgICAgICBhZ2dyZWdhdGVkQ29tcGFyaXNvblJlc3VsdCA9IG5ldyBDb21wYXJpc29uUmVzdWx0KCk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGF0dHJpYnV0ZVBhdGhzLmxlbmd0aDsgaSsrKSB7CgogICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBnZXRWYWx1ZShkZXZpY2VQcmludCwgYXR0cmlidXRlUGF0aHNbaV0pOwogICAgICAgICAgICBzdG9yZWRWYWx1ZSA9IGdldFZhbHVlKGN1ckRldmljZVByaW50UHJvZmlsZS5kZXZpY2VQcmludCwgYXR0cmlidXRlUGF0aHNbaV0pOwogICAgICAgICAgICBhdHRyQ29uZmlnID0gZ2V0VmFsdWUoYXR0cmlidXRlQ29uZmlnLCBhdHRyaWJ1dGVQYXRoc1tpXSk7CgogICAgICAgICAgICBpZiAoc3RvcmVkVmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGNvbXBhcmlzb25SZXN1bHQgPSBuZXcgQ29tcGFyaXNvblJlc3VsdChhdHRyQ29uZmlnLnBlbmFsdHlQb2ludHMpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29tcGFyaXNvblJlc3VsdCA9IGF0dHJDb25maWcuY29tcGFyYXRvci5jb21wYXJlKGN1cnJlbnRWYWx1ZSwgc3RvcmVkVmFsdWUsIGF0dHJDb25maWcuYXJncyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJDb21wYXJpbmcgYXR0cmlidXRlIHBhdGg6ICIgKyBhdHRyaWJ1dGVQYXRoc1tpXQogICAgICAgICAgICAgICAgICAgICsgIiwgQ29tcGFyaXNvbiByZXN1bHQ6IHN1Y2Nlc3NmdWw9IiArIGNvbXBhcmlzb25SZXN1bHQuaXNTdWNjZXNzZnVsKCkgKyAiLCBwZW5hbHR5UG9pbnRzPSIKICAgICAgICAgICAgICAgICAgICArIGNvbXBhcmlzb25SZXN1bHQucGVuYWx0eVBvaW50cyArICIsIGFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWU9IgogICAgICAgICAgICAgICAgICAgICsgY29tcGFyaXNvblJlc3VsdC5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlKTsKCiAgICAgICAgICAgIGFnZ3JlZ2F0ZWRDb21wYXJpc29uUmVzdWx0LmFkZENvbXBhcmlzb25SZXN1bHQoY29tcGFyaXNvblJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIGlmIChsb2dnZXIubWVzc2FnZUVuYWJsZWQoKSkgewogICAgICAgICAgICBsb2dnZXIubWVzc2FnZSgiQWdncmVnYXRlZCBjb21wYXJpc29uIHJlc3VsdDogc3VjY2Vzc2Z1bD0iCiAgICAgICAgICAgICAgICArIGFnZ3JlZ2F0ZWRDb21wYXJpc29uUmVzdWx0LmlzU3VjY2Vzc2Z1bCgpICsgIiwgcGVuYWx0eVBvaW50cz0iCiAgICAgICAgICAgICAgICArIGFnZ3JlZ2F0ZWRDb21wYXJpc29uUmVzdWx0LnBlbmFsdHlQb2ludHMgKyAiLCBhZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlPSIKICAgICAgICAgICAgICAgICsgYWdncmVnYXRlZENvbXBhcmlzb25SZXN1bHQuYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZSk7CiAgICAgICAgfQoKICAgICAgICByZXN1bHRzLnB1c2goewogICAgICAgICAgICBrZXk6IGFnZ3JlZ2F0ZWRDb21wYXJpc29uUmVzdWx0LAogICAgICAgICAgICB2YWx1ZTogZGV2aWNlUHJpbnRQcm9maWxlc1tqXQogICAgICAgIH0pOwogICAgfQoKICAJLy9sb2dnZXIubWVzc2FnZSgiUkVTVUxUUyAiICsgcmVzdWx0cyk7CiAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICByZXN1bHRzLnNvcnQoZnVuY3Rpb24oYSwgYikgewogICAgICAgIHJldHVybiBDb21wYXJpc29uUmVzdWx0LmNvbXBhcmUoYS5rZXksIGIua2V5KTsKICAgIH0pOwogICAgc2VsZWN0ZWRDb21wYXJpc29uUmVzdWx0ID0gcmVzdWx0c1swXS5rZXk7CiAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiU2VsZWN0ZWQgY29tcGFyaXNvbiByZXN1bHQ6IHN1Y2Nlc3NmdWw9IiArIHNlbGVjdGVkQ29tcGFyaXNvblJlc3VsdC5pc1N1Y2Nlc3NmdWwoKQogICAgICAgICAgICArICIsIHBlbmFsdHlQb2ludHM9IiArIHNlbGVjdGVkQ29tcGFyaXNvblJlc3VsdC5wZW5hbHR5UG9pbnRzICsgIiwgYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZT0iCiAgICAgICAgICAgICsgc2VsZWN0ZWRDb21wYXJpc29uUmVzdWx0LmFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUpOwogICAgfQoKICAgIHNlbGVjdGVkUHJvZmlsZSA9IG51bGw7CiAgICBpZiAoc2VsZWN0ZWRDb21wYXJpc29uUmVzdWx0LnBlbmFsdHlQb2ludHMgPD0gbWF4UGVuYWx0eVBvaW50cykgewogICAgICAgIHNlbGVjdGVkUHJvZmlsZSA9IHJlc3VsdHNbMF0udmFsdWU7CiAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJTZWxlY3RlZCBwcm9maWxlOiAiICsgSlNPTi5zdHJpbmdpZnkoc2VsZWN0ZWRQcm9maWxlKSArCiAgICAgICAgICAgICAgICAiIHdpdGggIiArIHNlbGVjdGVkQ29tcGFyaXNvblJlc3VsdC5wZW5hbHR5UG9pbnRzICsgIiBwZW5hbHR5IHBvaW50cyIpOwogICAgfQoKICAgIGlmIChzZWxlY3RlZFByb2ZpbGUgPT09IG51bGwpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyogdXBkYXRlIHByb2ZpbGUgKi8KICAgIHNlbGVjdGVkUHJvZmlsZS5zZWxlY3Rpb25Db3VudGVyID0KICAgICAgICBqYXZhLmxhbmcuSW50ZWdlci52YWx1ZU9mKHBhcnNlSW50KHNlbGVjdGVkUHJvZmlsZS5zZWxlY3Rpb25Db3VudGVyLCAxMCkgKyAxKTsKICAgIHNlbGVjdGVkUHJvZmlsZS5sYXN0U2VsZWN0ZWREYXRlID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICBzZWxlY3RlZFByb2ZpbGUuZGV2aWNlUHJpbnQgPSBkZXZpY2VQcmludDsKCiAgICB2YWxzID0gW107CiAgICBmb3IgKGkgPSAwOyBpIDwgZGV2aWNlUHJpbnRQcm9maWxlcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhbHMucHVzaChKU09OLnN0cmluZ2lmeShKU09OLnBhcnNlKG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuanNvbihkZXZpY2VQcmludFByb2ZpbGVzW2ldKSkpKTsKICAgIH0KCiAgICAvL3B1dHRpbmcgYW4gYXJyYXkgb2YgZGV2aWNlUHJpbnRQcm9maWxlIHN0cmluZ3MgaW4gc2hhcmVkU3RhdGUKICAJc2hhcmVkU3RhdGUucHV0KCJkZXZpY2VQcmludFByb2ZpbGVzIiwgdmFscyk7CiAgICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gbWF0Y2hEZXZpY2VQcmludCgpIHsKCiAgICBpZiAoIXVzZXJuYW1lKSB7CiAgICAgICAgbG9nZ2VyLmVycm9yKCJVc2VybmFtZSBub3Qgc2V0LiBDYW5ub3QgY29tcGFyZSB1c2VyJ3MgZGV2aWNlIHByaW50IHByb2ZpbGVzLiIpOwogICAgICAgIG91dGNvbWUgPSAiZXJyb3IiOwogICAgfSBlbHNlIHsKCiAgICAgICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJjbGllbnQgZGV2aWNlUHJpbnQ6ICIgKyBjbGllbnRTY3JpcHRPdXRwdXREYXRhKTsKICAgICAgICB9CgogICAgICAgIHZhciBnZXRQcm9maWxlcyA9IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc0V4cGlyZWRQcm9maWxlKGRldmljZVByaW50UHJvZmlsZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBleHBpcmF0aW9uRGF0ZSA9IG5ldyBEYXRlKCksCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTZWxlY3RlZERhdGU7CiAgICAgICAgICAgICAgICAgICAgZXhwaXJhdGlvbkRhdGUuc2V0RGF0ZShleHBpcmF0aW9uRGF0ZS5nZXREYXRlKCkgLSBjb25maWcucHJvZmlsZUV4cGlyYXRpb24pOwoKICAgICAgICAgICAgICAgICAgICBsYXN0U2VsZWN0ZWREYXRlID0gbmV3IERhdGUoZGV2aWNlUHJpbnRQcm9maWxlLmxhc3RTZWxlY3RlZERhdGUpOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFNlbGVjdGVkRGF0ZSA8IGV4cGlyYXRpb25EYXRlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5vdEV4cGlyZWRQcm9maWxlcygpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZSwKICAgICAgICAgICAgICAgICAgICAgICAgZGFvID0gc2hhcmVkU3RhdGUuZ2V0KCdfRGV2aWNlSWREYW8nKSwKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlcywKICAgICAgICAgICAgICAgICAgICAgICAgaXRlcjsKCgogICAgICAgICAgICAgICAgICAgIHByb2ZpbGVzID0gSlNPTi5wYXJzZShzaGFyZWRTdGF0ZS5nZXQoImRldmljZVByaW50UHJvZmlsZXMiKSk7CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoImRldmljZVByaW50UHJvZmlsZXM6ICIgKyBKU09OLnN0cmluZ2lmeShwcm9maWxlcykpOwoKCiAgICAgICAgICAgICAgICAgIAlpZiAocHJvZmlsZXMpIHsKICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTwgcHJvZmlsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgCWlmICghaXNFeHBpcmVkUHJvZmlsZShwcm9maWxlc1tpXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAlyZXN1bHRzLnB1c2gocHJvZmlsZXNbaV0pOwoJICAgICAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoInN0b3JlZCBub24tZXhwaXJlZCBwcm9maWxlczogIiArIHJlc3VsdHMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Tm90RXhwaXJlZFByb2ZpbGVzKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRldmljZVByaW50ID0gSlNPTi5wYXJzZShjbGllbnRTY3JpcHRPdXRwdXREYXRhKSwKICAgICAgICAgICAgZGV2aWNlUHJpbnRQcm9maWxlcyA9IGdldFByb2ZpbGVzKCk7CgogICAgICAgIGlmICghaGFzUmVxdWlyZWRBdHRyaWJ1dGVzKGRldmljZVByaW50LCBjb25maWcuYXR0cmlidXRlcykpIHsKICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoImRldmljZVByaW50Lmhhc1JlcXVpcmVkQXR0cmlidXRlczogZmFsc2UiKTsKICAgICAgICAgICAgLy8gV2lsbCBmYWlsIHRoaXMgbW9kdWxlIGJ1dCBmYWxsLXRocm91Z2ggdG8gbmV4dCBtb2R1bGUuIFdoaWNoIHNob3VsZCBiZSBPVFAuCiAgICAgICAgICAgIG91dGNvbWUgPSAiZXJyb3IiOwogICAgICAgIH0gZWxzZSBpZiAoY29tcGFyZURldmljZVByaW50UHJvZmlsZXMoY29uZmlnLmF0dHJpYnV0ZXMsIGRldmljZVByaW50LCBkZXZpY2VQcmludFByb2ZpbGVzLCBjb25maWcubWF4UGVuYWx0eVBvaW50cykpIHsKICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoImRldmljZVByaW50Lmhhc1ZhbGlkUHJvZmlsZTogdHJ1ZSIpOwogICAgICAgICAgICBvdXRjb21lID0gIm1hdGNoZWQiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJkZXZpY2VQcmludC5oYXNWYWxpZFByb2ZpbGU6IGZhbHNlIik7CiAgICAgICAgICAgIC8vIFdpbGwgZmFpbCB0aGlzIG1vZHVsZSBidXQgZmFsbC10aHJvdWdoIHRvIG5leHQgbW9kdWxlLiBXaGljaCBzaG91bGQgYmUgT1RQLgogICAgICAgICAgICBvdXRjb21lID0gIm5vdCBtYXRjaGVkIjsKICAgICAgICB9CiAgICB9Cn0KCnVzZXJuYW1lID0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpOwpyZWFsbSA9IHNoYXJlZFN0YXRlLmdldCgicmVhbG0iKTsKY2xpZW50U2NyaXB0T3V0cHV0RGF0YSA9IHNoYXJlZFN0YXRlLmdldCgiZGV2aWNlUHJpbnQiKTsKbWF0Y2hEZXZpY2VQcmludCgpOw==",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0
        },
        "e8ffed9c-fa1a-4fc3-8f59-49990ded1210": {
          "_id": "e8ffed9c-fa1a-4fc3-8f59-49990ded1210",
          "name": "CS-DeviceID Match-ClientSide",
          "description": "This client-side script is the JavaScript code that runs at the client to inspect the device, and saves the fingerprint into the shared state devicePrint variable",
          "script": "dmFyIGZvbnREZXRlY3RvciA9IChmdW5jdGlvbiAoKSB7CiAgICAvKioKICAgICAqIEphdmFTY3JpcHQgY29kZSB0byBkZXRlY3QgYXZhaWxhYmxlIGF2YWlsYWJpbGl0eSBvZiBhCiAgICAgKiBwYXJ0aWN1bGFyIGZvbnQgaW4gYSBicm93c2VyIHVzaW5nIEphdmFTY3JpcHQgYW5kIENTUy4KICAgICAqCiAgICAgKiBBdXRob3IgOiBMYWxpdCBQYXRlbAogICAgICogV2Vic2l0ZTogaHR0cDovL3d3dy5sYWxpdC5vcmcvbGFiL2phdmFzY3JpcHQtY3NzLWZvbnQtZGV0ZWN0LwogICAgICogTGljZW5zZTogQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgMi4wCiAgICAgKiAgICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICAgICAqIFZlcnNpb246IDAuMTUgKDIxIFNlcCAyMDA5KQogICAgICogICAgICAgICAgQ2hhbmdlZCBjb21wYXJpc2lvbiBmb250IHRvIGRlZmF1bHQgZnJvbSBzYW5zLWRlZmF1bHQtZGVmYXVsdCwKICAgICAqICAgICAgICAgIGFzIGluIEZGMy4wIGZvbnQgb2YgY2hpbGQgZWxlbWVudCBkaWRuJ3QgZmFsbGJhY2sKICAgICAqICAgICAgICAgIHRvIHBhcmVudCBlbGVtZW50IGlmIHRoZSBmb250IGlzIG1pc3NpbmcuCiAgICAgKiBWZXJzaW9uOiAwLjIgKDA0IE1hciAyMDEyKQogICAgICogICAgICAgICAgQ29tcGFyaW5nIGZvbnQgYWdhaW5zdCBhbGwgdGhlIDMgZ2VuZXJpYyBmb250IGZhbWlsaWVzIGllLAogICAgICogICAgICAgICAgJ21vbm9zcGFjZScsICdzYW5zLXNlcmlmJyBhbmQgJ3NhbnMnLiBJZiBpdCBkb2Vzbid0IG1hdGNoIGFsbCAzCiAgICAgKiAgICAgICAgICB0aGVuIHRoYXQgZm9udCBpcyAxMDAlIG5vdCBhdmFpbGFibGUgaW4gdGhlIHN5c3RlbQogICAgICogVmVyc2lvbjogMC4zICgyNCBNYXIgMjAxMikKICAgICAqICAgICAgICAgIFJlcGxhY2VkIHNhbnMgd2l0aCBzZXJpZiBpbiB0aGUgbGlzdCBvZiBiYXNlRm9udHMKICAgICAqLwogICAgLyoKICAgICAqIFBvcnRpb25zIENvcHlyaWdodGVkIDIwMTMgRm9yZ2VSb2NrIEFTLgogICAgICovCiAgICB2YXIgZGV0ZWN0b3IgPSB7fSwgYmFzZUZvbnRzLCB0ZXN0U3RyaW5nLCB0ZXN0U2l6ZSwgaCwgcywgZGVmYXVsdFdpZHRoID0ge30sIGRlZmF1bHRIZWlnaHQgPSB7fSwgaW5kZXg7CgogICAgLy8gYSBmb250IHdpbGwgYmUgY29tcGFyZWQgYWdhaW5zdCBhbGwgdGhlIHRocmVlIGRlZmF1bHQgZm9udHMuCiAgICAvLyBhbmQgaWYgaXQgZG9lc24ndCBtYXRjaCBhbGwgMyB0aGVuIHRoYXQgZm9udCBpcyBub3QgYXZhaWxhYmxlLgogICAgYmFzZUZvbnRzID0gWydtb25vc3BhY2UnLCAnc2Fucy1zZXJpZicsICdzZXJpZiddOwoKICAgIC8vd2UgdXNlIG0gb3IgdyBiZWNhdXNlIHRoZXNlIHR3byBjaGFyYWN0ZXJzIHRha2UgdXAgdGhlIG1heGltdW0gd2lkdGguCiAgICAvLyBBbmQgd2UgdXNlIGEgTExpIHNvIHRoYXQgdGhlIHNhbWUgbWF0Y2hpbmcgZm9udHMgY2FuIGdldCBzZXBhcmF0ZWQKICAgIHRlc3RTdHJpbmcgPSAibW1tbW1tbW1tbWxsaSI7CgogICAgLy93ZSB0ZXN0IHVzaW5nIDcycHggZm9udCBzaXplLCB3ZSBtYXkgdXNlIGFueSBzaXplLiBJIGd1ZXNzIGxhcmdlciB0aGUgYmV0dGVyLgogICAgdGVzdFNpemUgPSAnNzJweCc7CgogICAgaCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF07CgogICAgLy8gY3JlYXRlIGEgU1BBTiBpbiB0aGUgZG9jdW1lbnQgdG8gZ2V0IHRoZSB3aWR0aCBvZiB0aGUgdGV4dCB3ZSB1c2UgdG8gdGVzdAogICAgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgIHMuc3R5bGUuZm9udFNpemUgPSB0ZXN0U2l6ZTsKICAgIHMuaW5uZXJIVE1MID0gdGVzdFN0cmluZzsKICAgIGZvciAoaW5kZXggaW4gYmFzZUZvbnRzKSB7CiAgICAgICAgLy9nZXQgdGhlIGRlZmF1bHQgd2lkdGggZm9yIHRoZSB0aHJlZSBiYXNlIGZvbnRzCiAgICAgICAgcy5zdHlsZS5mb250RmFtaWx5ID0gYmFzZUZvbnRzW2luZGV4XTsKICAgICAgICBoLmFwcGVuZENoaWxkKHMpOwogICAgICAgIGRlZmF1bHRXaWR0aFtiYXNlRm9udHNbaW5kZXhdXSA9IHMub2Zmc2V0V2lkdGg7IC8vd2lkdGggZm9yIHRoZSBkZWZhdWx0IGZvbnQKICAgICAgICBkZWZhdWx0SGVpZ2h0W2Jhc2VGb250c1tpbmRleF1dID0gcy5vZmZzZXRIZWlnaHQ7IC8vaGVpZ2h0IGZvciB0aGUgZGVmdWFsdCBmb250CiAgICAgICAgaC5yZW1vdmVDaGlsZChzKTsKICAgIH0KCiAgICBkZXRlY3Rvci5kZXRlY3QgPSBmdW5jdGlvbihmb250KSB7CiAgICAgICAgdmFyIGRldGVjdGVkID0gZmFsc2UsIGluZGV4LCBtYXRjaGVkOwogICAgICAgIGZvciAoaW5kZXggaW4gYmFzZUZvbnRzKSB7CiAgICAgICAgICAgIHMuc3R5bGUuZm9udEZhbWlseSA9IGZvbnQgKyAnLCcgKyBiYXNlRm9udHNbaW5kZXhdOyAvLyBuYW1lIG9mIHRoZSBmb250IGFsb25nIHdpdGggdGhlIGJhc2UgZm9udCBmb3IgZmFsbGJhY2suCiAgICAgICAgICAgIGguYXBwZW5kQ2hpbGQocyk7CiAgICAgICAgICAgIG1hdGNoZWQgPSAocy5vZmZzZXRXaWR0aCAhPT0gZGVmYXVsdFdpZHRoW2Jhc2VGb250c1tpbmRleF1dIHx8IHMub2Zmc2V0SGVpZ2h0ICE9PSBkZWZhdWx0SGVpZ2h0W2Jhc2VGb250c1tpbmRleF1dKTsKICAgICAgICAgICAgaC5yZW1vdmVDaGlsZChzKTsKICAgICAgICAgICAgZGV0ZWN0ZWQgPSBkZXRlY3RlZCB8fCBtYXRjaGVkOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZGV0ZWN0ZWQ7CiAgICB9OwoKICAgIHJldHVybiBkZXRlY3RvcjsKfSgpKTsKLyoKICogRE8gTk9UIEFMVEVSIE9SIFJFTU9WRSBDT1BZUklHSFQgTk9USUNFUyBPUiBUSElTIEhFQURFUi4KICoKICogQ29weXJpZ2h0IChjKSAyMDA5IFN1biBNaWNyb3N5c3RlbXMgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIHRlcm1zCiAqIG9mIHRoZSBDb21tb24gRGV2ZWxvcG1lbnQgYW5kIERpc3RyaWJ1dGlvbiBMaWNlbnNlCiAqICh0aGUgTGljZW5zZSkuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluCiAqIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICoKICogWW91IGNhbiBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqIGh0dHBzOi8vb3BlbnNzby5kZXYuamF2YS5uZXQvcHVibGljL0NEREx2MS4wLmh0bWwgb3IKICogb3BlbnNzby9sZWdhbC9DRERMdjEuMC50eHQKICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nCiAqIHBlcm1pc3Npb24gYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKiBXaGVuIGRpc3RyaWJ1dGluZyBDb3ZlcmVkIENvZGUsIGluY2x1ZGUgdGhpcyBDRERMCiAqIEhlYWRlciBOb3RpY2UgaW4gZWFjaCBmaWxlIGFuZCBpbmNsdWRlIHRoZSBMaWNlbnNlIGZpbGUKICogYXQgb3BlbnNzby9sZWdhbC9DRERMdjEuMC50eHQuCiAqIElmIGFwcGxpY2FibGUsIGFkZCB0aGUgZm9sbG93aW5nIGJlbG93IHRoZSBDRERMIEhlYWRlciwKICogd2l0aCB0aGUgZmllbGRzIGVuY2xvc2VkIGJ5IGJyYWNrZXRzIFtdIHJlcGxhY2VkIGJ5CiAqIHlvdXIgb3duIGlkZW50aWZ5aW5nIGluZm9ybWF0aW9uOgogKiAiUG9ydGlvbnMgQ29weXJpZ2h0ZWQgW3llYXJdIFtuYW1lIG9mIGNvcHlyaWdodCBvd25lcl0iCiAqCiAqLwovKgogKiBQb3J0aW9ucyBDb3B5cmlnaHRlZCAyMDEzIFN5bnRlZ3JpdHkuCiAqIFBvcnRpb25zIENvcHlyaWdodGVkIDIwMTMtMjAxNCBGb3JnZVJvY2sgQVMuCiAqLwoKdmFyIGNvbGxlY3RTY3JlZW5JbmZvID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBzY3JlZW5JbmZvID0ge307CiAgICAgICAgaWYgKHNjcmVlbikgewogICAgICAgICAgICBpZiAoc2NyZWVuLndpZHRoKSB7CiAgICAgICAgICAgICAgICBzY3JlZW5JbmZvLnNjcmVlbldpZHRoID0gc2NyZWVuLndpZHRoOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc2NyZWVuLmhlaWdodCkgewogICAgICAgICAgICAgICAgc2NyZWVuSW5mby5zY3JlZW5IZWlnaHQgPSBzY3JlZW4uaGVpZ2h0OwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc2NyZWVuLnBpeGVsRGVwdGgpIHsKICAgICAgICAgICAgICAgIHNjcmVlbkluZm8uc2NyZWVuQ29sb3VyRGVwdGggPSBzY3JlZW4ucGl4ZWxEZXB0aDsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUud2FybigiQ2Fubm90IGNvbGxlY3Qgc2NyZWVuIGluZm9ybWF0aW9uLiBzY3JlZW4gaXMgbm90IGRlZmluZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzY3JlZW5JbmZvOwogICAgfSwKICAgIGNvbGxlY3RUaW1lem9uZUluZm8gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHRpbWV6b25lSW5mbyA9ICB7fSwgb2Zmc2V0ID0gbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpOwoKICAgICAgICBpZiAob2Zmc2V0KSB7CiAgICAgICAgICAgIHRpbWV6b25lSW5mby50aW1lem9uZSA9IG9mZnNldDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLndhcm4oIkNhbm5vdCBjb2xsZWN0IHRpbWV6b25lIGluZm9ybWF0aW9uLiB0aW1lem9uZSBpcyBub3QgZGVmaW5lZC4iKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aW1lem9uZUluZm87CiAgICB9LAogICAgY29sbGVjdEJyb3dzZXJQbHVnaW5zSW5mbyA9IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgaWYgKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IucGx1Z2lucykgewogICAgICAgICAgICB2YXIgcGx1Z2luc0luZm8gPSB7fSwgaSwgcGx1Z2lucyA9IG5hdmlnYXRvci5wbHVnaW5zOwogICAgICAgICAgICBwbHVnaW5zSW5mby5pbnN0YWxsZWRQbHVnaW5zID0gIiI7CgogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgcGx1Z2luc0luZm8uaW5zdGFsbGVkUGx1Z2lucyA9IHBsdWdpbnNJbmZvLmluc3RhbGxlZFBsdWdpbnMgKyBwbHVnaW5zW2ldLmZpbGVuYW1lICsgIjsiOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcGx1Z2luc0luZm87CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCJDYW5ub3QgY29sbGVjdCBicm93c2VyIHBsdWdpbiBpbmZvcm1hdGlvbi4gbmF2aWdhdG9yLnBsdWdpbnMgaXMgbm90IGRlZmluZWQuIik7CiAgICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICB9CgogICAgfSwKLy8gR2V0dGluZyBnZW9sb2NhdGlvbiB0YWtlcyBzb21lIHRpbWUgYW5kIGlzIGRvbmUgYXN5bmNocm9ub3VzbHksIGhlbmNlIG5lZWQgYSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgb25jZSBnZW9sb2NhdGlvbiBpcyByZXRyaWV2ZWQuCiAgICBjb2xsZWN0R2VvbG9jYXRpb25JbmZvID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIGdlb2xvY2F0aW9uSW5mbyA9IHt9LAogICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbihwb3NpdGlvbikgewogICAgICAgICAgICAgICAgZ2VvbG9jYXRpb25JbmZvLmxvbmdpdHVkZSA9IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGU7CiAgICAgICAgICAgICAgICBnZW9sb2NhdGlvbkluZm8ubGF0aXR1ZGUgPSBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGU7CiAgICAgICAgICAgICAgICBjYWxsYmFjayhnZW9sb2NhdGlvbkluZm8pOwogICAgICAgICAgICB9LCBlcnJvckNhbGxiYWNrID0gZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigiQ2Fubm90IGNvbGxlY3QgZ2VvbG9jYXRpb24gaW5mb3JtYXRpb24uICIgKyBlcnJvci5jb2RlICsgIjogIiArIGVycm9yLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgY2FsbGJhY2soZ2VvbG9jYXRpb25JbmZvKTsKICAgICAgICAgICAgfTsKICAgICAgICBpZiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci5nZW9sb2NhdGlvbikgewogICAgICAgICAgICAvLyBOQjogSWYgdXNlciBjaG9vc2VzICdOb3Qgbm93JyBvbiBGaXJlZm94IG5laXRoZXIgY2FsbGJhY2sgZ2V0cyBjYWxsZWQKICAgICAgICAgICAgLy8gICAgIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY3NTUzMwogICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCJDYW5ub3QgY29sbGVjdCBnZW9sb2NhdGlvbiBpbmZvcm1hdGlvbi4gbmF2aWdhdG9yLmdlb2xvY2F0aW9uIGlzIG5vdCBkZWZpbmVkLiIpOwogICAgICAgICAgICBjYWxsYmFjayhnZW9sb2NhdGlvbkluZm8pOwogICAgICAgIH0KICAgIH0sCiAgICBjb2xsZWN0QnJvd3NlckZvbnRzSW5mbyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZm9udHNJbmZvID0ge30sIGksIGZvbnRzTGlzdCA9IFsiY3Vyc2l2ZSIsIm1vbm9zcGFjZSIsInNlcmlmIiwic2Fucy1zZXJpZiIsImZhbnRhc3kiLCJkZWZhdWx0IiwiQXJpYWwiLCJBcmlhbCBCbGFjayIsCiAgICAgICAgICAgICJBcmlhbCBOYXJyb3ciLCJBcmlhbCBSb3VuZGVkIE1UIEJvbGQiLCJCb29rbWFuIE9sZCBTdHlsZSIsIkJyYWRsZXkgSGFuZCBJVEMiLCJDZW50dXJ5IiwiQ2VudHVyeSBHb3RoaWMiLAogICAgICAgICAgICAiQ29taWMgU2FucyBNUyIsIkNvdXJpZXIiLCJDb3VyaWVyIE5ldyIsIkdlb3JnaWEiLCJHZW50aXVtIiwiSW1wYWN0IiwiS2luZyIsIkx1Y2lkYSBDb25zb2xlIiwiTGFsaXQiLAogICAgICAgICAgICAiTW9kZW5hIiwiTW9ub3R5cGUgQ29yc2l2YSIsIlBhcHlydXMiLCJUYWhvbWEiLCJUZVgiLCJUaW1lcyIsIlRpbWVzIE5ldyBSb21hbiIsIlRyZWJ1Y2hldCBNUyIsIlZlcmRhbmEiLAogICAgICAgICAgICAiVmVyb25hIl07CiAgICAgICAgZm9udHNJbmZvLmluc3RhbGxlZEZvbnRzID0gIiI7CgogICAgICAgIGZvciAoaSA9IDA7IGkgPCBmb250c0xpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGZvbnREZXRlY3Rvci5kZXRlY3QoZm9udHNMaXN0W2ldKSkgewogICAgICAgICAgICAgICAgZm9udHNJbmZvLmluc3RhbGxlZEZvbnRzID0gZm9udHNJbmZvLmluc3RhbGxlZEZvbnRzICsgZm9udHNMaXN0W2ldICsgIjsiOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmb250c0luZm87CiAgICB9LAogICAgZGV2aWNlUHJpbnQgPSB7fTsKCmRldmljZVByaW50LnNjcmVlbiA9IGNvbGxlY3RTY3JlZW5JbmZvKCk7CmRldmljZVByaW50LnRpbWV6b25lID0gY29sbGVjdFRpbWV6b25lSW5mbygpOwpkZXZpY2VQcmludC5wbHVnaW5zID0gY29sbGVjdEJyb3dzZXJQbHVnaW5zSW5mbygpOwpkZXZpY2VQcmludC5mb250cyA9IGNvbGxlY3RCcm93c2VyRm9udHNJbmZvKCk7CgppZiAobmF2aWdhdG9yLnVzZXJBZ2VudCkgewogICAgZGV2aWNlUHJpbnQudXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudDsKfQppZiAobmF2aWdhdG9yLmFwcE5hbWUpIHsKICAgIGRldmljZVByaW50LmFwcE5hbWUgPSBuYXZpZ2F0b3IuYXBwTmFtZTsKfQppZiAobmF2aWdhdG9yLmFwcENvZGVOYW1lKSB7CiAgICBkZXZpY2VQcmludC5hcHBDb2RlTmFtZSA9IG5hdmlnYXRvci5hcHBDb2RlTmFtZTsKfQppZiAobmF2aWdhdG9yLmFwcFZlcnNpb24pIHsKICAgIGRldmljZVByaW50LmFwcFZlcnNpb24gPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbjsKfQppZiAobmF2aWdhdG9yLmFwcE1pbm9yVmVyc2lvbikgewogICAgZGV2aWNlUHJpbnQuYXBwTWlub3JWZXJzaW9uID0gbmF2aWdhdG9yLmFwcE1pbm9yVmVyc2lvbjsKfQppZiAobmF2aWdhdG9yLmJ1aWxkSUQpIHsKICAgIGRldmljZVByaW50LmJ1aWxkSUQgPSBuYXZpZ2F0b3IuYnVpbGRJRDsKfQppZiAobmF2aWdhdG9yLnBsYXRmb3JtKSB7CiAgICBkZXZpY2VQcmludC5wbGF0Zm9ybSA9IG5hdmlnYXRvci5wbGF0Zm9ybTsKfQppZiAobmF2aWdhdG9yLmNwdUNsYXNzKSB7CiAgICBkZXZpY2VQcmludC5jcHVDbGFzcyA9IG5hdmlnYXRvci5jcHVDbGFzczsKfQppZiAobmF2aWdhdG9yLm9zY3B1KSB7CiAgICBkZXZpY2VQcmludC5vc2NwdSA9IG5hdmlnYXRvci5vc2NwdTsKfQppZiAobmF2aWdhdG9yLnByb2R1Y3QpIHsKICAgIGRldmljZVByaW50LnByb2R1Y3QgPSBuYXZpZ2F0b3IucHJvZHVjdDsKfQppZiAobmF2aWdhdG9yLnByb2R1Y3RTdWIpIHsKICAgIGRldmljZVByaW50LnByb2R1Y3RTdWIgPSBuYXZpZ2F0b3IucHJvZHVjdFN1YjsKfQppZiAobmF2aWdhdG9yLnZlbmRvcikgewogICAgZGV2aWNlUHJpbnQudmVuZG9yID0gbmF2aWdhdG9yLnZlbmRvcjsKfQppZiAobmF2aWdhdG9yLnZlbmRvclN1YikgewogICAgZGV2aWNlUHJpbnQudmVuZG9yU3ViID0gbmF2aWdhdG9yLnZlbmRvclN1YjsKfQppZiAobmF2aWdhdG9yLmxhbmd1YWdlKSB7CiAgICBkZXZpY2VQcmludC5sYW5ndWFnZSA9IG5hdmlnYXRvci5sYW5ndWFnZTsKfQppZiAobmF2aWdhdG9yLnVzZXJMYW5ndWFnZSkgewogICAgZGV2aWNlUHJpbnQudXNlckxhbmd1YWdlID0gbmF2aWdhdG9yLnVzZXJMYW5ndWFnZTsKfQppZiAobmF2aWdhdG9yLmJyb3dzZXJMYW5ndWFnZSkgewogICAgZGV2aWNlUHJpbnQuYnJvd3Nlckxhbmd1YWdlID0gbmF2aWdhdG9yLmJyb3dzZXJMYW5ndWFnZTsKfQppZiAobmF2aWdhdG9yLnN5c3RlbUxhbmd1YWdlKSB7CiAgICBkZXZpY2VQcmludC5zeXN0ZW1MYW5ndWFnZSA9IG5hdmlnYXRvci5zeXN0ZW1MYW5ndWFnZTsKfQoKLy8gQXR0ZW1wdCB0byBjb2xsZWN0IGdlby1sb2NhdGlvbiBpbmZvcm1hdGlvbiBhbmQgcmV0dXJuIHRoaXMgd2l0aCB0aGUgZGF0YSBjb2xsZWN0ZWQgc28gZmFyLgovLyBPdGhlcndpc2UsIGlmIGdlby1sb2NhdGlvbiBmYWlscyBvciB0YWtlcyBsb25nZXIgdGhhbiAzMCBzZWNvbmRzLCBhdXRvLXN1Ym1pdCB0aGUgZGF0YSBjb2xsZWN0ZWQgc28gZmFyLgpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9naW5CdXR0b25fMCcpLnN0eWxlLmRpc3BsYXk9Im5vbmUiOwphdXRvU3VibWl0RGVsYXkgPSAzMDAwMDsKb3V0cHV0LnZhbHVlID0gSlNPTi5zdHJpbmdpZnkoZGV2aWNlUHJpbnQpOwpjb2xsZWN0R2VvbG9jYXRpb25JbmZvKGZ1bmN0aW9uKGdlb2xvY2F0aW9uSW5mbykgewogICAgZGV2aWNlUHJpbnQuZ2VvbG9jYXRpb24gPSBnZW9sb2NhdGlvbkluZm87CiAgICBvdXRwdXQudmFsdWUgPSBKU09OLnN0cmluZ2lmeShkZXZpY2VQcmludCk7CiAgICBzdWJtaXQoKTsKfSk7",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_CLIENT_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0
        }
      },
      "tree": {
        "_id": "DeviceFingerprint",
        "nodes": {
          "A0CD88C3-CD13-48C7-B20D-C19DF4F60CC2": {
            "displayName": "2. Username Collector",
            "nodeType": "UsernameCollectorNode",
            "connections": {
              "outcome": "C9B75C60-ACF6-4E70-84BC-77F5D9BD4498"
            }
          },
          "C9B75C60-ACF6-4E70-84BC-77F5D9BD4498": {
            "displayName": "3. Inspect Client Device",
            "nodeType": "ClientScriptNode",
            "connections": {
              "outcome": "ED1FC9C1-3F79-4835-AAED-A9A376533012"
            }
          },
          "ED1FC9C1-3F79-4835-AAED-A9A376533012": {
            "displayName": "4. Get stored fingerprints to Shared State",
            "nodeType": "ProfileAttributeToStateNode",
            "connections": {
              "outcome": "522007B4-C80C-47EF-AFB9-99C18B5FC4B8"
            }
          },
          "522007B4-C80C-47EF-AFB9-99C18B5FC4B8": {
            "displayName": "5. Find Match?",
            "nodeType": "ScriptedDecisionNode",
            "connections": {
              "matched": "C72F9322-87DD-4FB3-B009-1873FC12DD19",
              "not matched": "838EC956-B7E4-4D73-A4FD-E7C1F1BF6413"
            }
          },
          "C72F9322-87DD-4FB3-B009-1873FC12DD19": {
            "displayName": "11. Update Device Fingerprints",
            "nodeType": "SetProfilePropertyNode",
            "connections": {
              "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            }
          },
          "838EC956-B7E4-4D73-A4FD-E7C1F1BF6413": {
            "displayName": "6. Password Inner Tree",
            "nodeType": "InnerTreeEvaluatorNode",
            "connections": {
              "true": "D8D71123-BF12-44A9-A9A9-FB03535CE9FC",
              "false": "e301438c-0bd0-429c-ab0c-66126501069a"
            }
          },
          "D8D71123-BF12-44A9-A9A9-FB03535CE9FC": {
            "displayName": "7. Save new fingerprint?",
            "nodeType": "ChoiceCollectorNode",
            "connections": {
              "save": "CB828D08-C341-48B9-BBC9-7819F747F5E1",
              "skip": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            }
          },
          "CB828D08-C341-48B9-BBC9-7819F747F5E1": {
            "displayName": "8. Prompt Device Name",
            "nodeType": "InputCollectorNode",
            "connections": {
              "outcome": "0658C073-9D56-4167-98D2-D25ADB88E6D1"
            }
          },
          "0658C073-9D56-4167-98D2-D25ADB88E6D1": {
            "displayName": "9. Add Trusted Device",
            "nodeType": "ScriptedDecisionNode",
            "connections": {
              "true": "3E9ACB9D-CA63-44D7-B57B-3B4ED08C2C36"
            }
          },
          "3E9ACB9D-CA63-44D7-B57B-3B4ED08C2C36": {
            "displayName": "10. : Add Device Fingerprint",
            "nodeType": "SetProfilePropertyNode",
            "connections": {
              "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            }
          }
        },
        "entryNodeId": "A0CD88C3-CD13-48C7-B20D-C19DF4F60CC2"
      }
    }
  }
}
